{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "99208759",
   "metadata": {
    "papermill": {
     "duration": 0.013154,
     "end_time": "2024-07-05T14:55:34.927657",
     "exception": false,
     "start_time": "2024-07-05T14:55:34.914503",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "\n",
    "- Follow up for the previous notes - to understand the gradient, activations in the neural net"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7d875d4",
   "metadata": {
    "papermill": {
     "duration": 0.012583,
     "end_time": "2024-07-05T14:55:34.954017",
     "exception": false,
     "start_time": "2024-07-05T14:55:34.941434",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Starting code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "44c7ff33",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-05T14:55:34.981216Z",
     "iopub.status.busy": "2024-07-05T14:55:34.980454Z",
     "iopub.status.idle": "2024-07-05T14:55:36.392227Z",
     "shell.execute_reply": "2024-07-05T14:55:36.391059Z"
    },
    "papermill": {
     "duration": 1.428178,
     "end_time": "2024-07-05T14:55:36.394759",
     "exception": false,
     "start_time": "2024-07-05T14:55:34.966581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2024-07-05 14:55:36--  https://raw.githubusercontent.com/karpathy/makemore/master/names.txt\r\n",
      "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.109.133, 185.199.108.133, 185.199.110.133, ...\r\n",
      "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.109.133|:443... connected.\r\n",
      "HTTP request sent, awaiting response... 200 OK\r\n",
      "Length: 228145 (223K) [text/plain]\r\n",
      "Saving to: 'names.txt'\r\n",
      "\r\n",
      "names.txt           100%[===================>] 222.80K  --.-KB/s    in 0.02s   \r\n",
      "\r\n",
      "2024-07-05 14:55:36 (13.7 MB/s) - 'names.txt' saved [228145/228145]\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    words = open(\"names.txt\",\"r\").read().splitlines()\n",
    "except:\n",
    "    !wget https://raw.githubusercontent.com/karpathy/makemore/master/names.txt\n",
    "    words = open(\"names.txt\",\"r\").read().splitlines()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4b3fb6ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:55:36.422072Z",
     "iopub.status.busy": "2024-07-05T14:55:36.421158Z",
     "iopub.status.idle": "2024-07-05T14:55:39.715832Z",
     "shell.execute_reply": "2024-07-05T14:55:39.714960Z"
    },
    "papermill": {
     "duration": 3.311467,
     "end_time": "2024-07-05T14:55:39.718489",
     "exception": false,
     "start_time": "2024-07-05T14:55:36.407022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn.functional as F\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm.auto import tqdm\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "135d7dc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:55:39.748841Z",
     "iopub.status.busy": "2024-07-05T14:55:39.747900Z",
     "iopub.status.idle": "2024-07-05T14:55:39.760082Z",
     "shell.execute_reply": "2024-07-05T14:55:39.759192Z"
    },
    "papermill": {
     "duration": 0.029752,
     "end_time": "2024-07-05T14:55:39.762372",
     "exception": false,
     "start_time": "2024-07-05T14:55:39.732620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "words = open('names.txt', 'r').read().splitlines()\n",
    "words[:8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3cae2f27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:55:39.789559Z",
     "iopub.status.busy": "2024-07-05T14:55:39.788984Z",
     "iopub.status.idle": "2024-07-05T14:55:39.800272Z",
     "shell.execute_reply": "2024-07-05T14:55:39.799260Z"
    },
    "papermill": {
     "duration": 0.02741,
     "end_time": "2024-07-05T14:55:39.802523",
     "exception": false,
     "start_time": "2024-07-05T14:55:39.775113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}\n",
      "27\n"
     ]
    }
   ],
   "source": [
    "# build the vocabulary of characters and mappings to/from integers\n",
    "chars = sorted(list(set(''.join(words))))\n",
    "stoi = {s:i+1 for i,s in enumerate(chars)}\n",
    "stoi['.'] = 0\n",
    "itos = {i:s for s,i in stoi.items()}\n",
    "vocab_size = len(itos)\n",
    "print(itos)\n",
    "print(vocab_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dbce1b30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:55:39.830946Z",
     "iopub.status.busy": "2024-07-05T14:55:39.830365Z",
     "iopub.status.idle": "2024-07-05T14:55:40.808632Z",
     "shell.execute_reply": "2024-07-05T14:55:40.807174Z"
    },
    "papermill": {
     "duration": 0.996217,
     "end_time": "2024-07-05T14:55:40.811820",
     "exception": false,
     "start_time": "2024-07-05T14:55:39.815603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([182625, 3]) torch.Size([182625])\n",
      "torch.Size([22655, 3]) torch.Size([22655])\n",
      "torch.Size([22866, 3]) torch.Size([22866])\n"
     ]
    }
   ],
   "source": [
    "# build the dataset\n",
    "block_size = 3 # context length: how many characters do we take to predict the next one?\n",
    "\n",
    "def build_dataset(words):  \n",
    "    X, Y = [], []\n",
    "  \n",
    "    for w in words:\n",
    "        context = [0] * block_size\n",
    "        for ch in w + '.':\n",
    "            ix = stoi[ch]\n",
    "            X.append(context)\n",
    "            Y.append(ix)\n",
    "            context = context[1:] + [ix] # crop and append\n",
    "\n",
    "    X = torch.tensor(X)\n",
    "    Y = torch.tensor(Y)\n",
    "    print(X.shape, Y.shape)\n",
    "    return X, Y\n",
    "\n",
    "import random\n",
    "random.seed(42)\n",
    "random.shuffle(words)\n",
    "n1 = int(0.8*len(words))\n",
    "n2 = int(0.9*len(words))\n",
    "\n",
    "Xtr,  Ytr  = build_dataset(words[:n1])     # 80%\n",
    "Xdev, Ydev = build_dataset(words[n1:n2])   # 10%\n",
    "Xte,  Yte  = build_dataset(words[n2:])     # 10%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5f8ff242",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:55:40.842411Z",
     "iopub.status.busy": "2024-07-05T14:55:40.841767Z",
     "iopub.status.idle": "2024-07-05T14:55:40.861484Z",
     "shell.execute_reply": "2024-07-05T14:55:40.860277Z"
    },
    "papermill": {
     "duration": 0.03721,
     "end_time": "2024-07-05T14:55:40.863550",
     "exception": false,
     "start_time": "2024-07-05T14:55:40.826340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11897\n"
     ]
    }
   ],
   "source": [
    "# MLP revisited\n",
    "n_embd = 10 # the dimensionality of the character embedding vectors\n",
    "n_hidden = 200 # the number of neurons in the hidden layer of the MLP\n",
    "\n",
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C  = torch.randn((vocab_size, n_embd),            generator=g)\n",
    "W1 = torch.randn((n_embd * block_size, n_hidden), generator=g) \n",
    "b1 = torch.randn(n_hidden,                        generator=g) \n",
    "W2 = torch.randn((n_hidden, vocab_size),          generator=g) \n",
    "b2 = torch.randn(vocab_size,                      generator=g)\n",
    "\n",
    "parameters = [C, W1,b1, W2, b2]\n",
    "\n",
    "print(sum(p.nelement() for p in parameters)) # number of parameters in total\n",
    "\n",
    "for p in parameters:\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3d98e6b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:55:40.892017Z",
     "iopub.status.busy": "2024-07-05T14:55:40.891458Z",
     "iopub.status.idle": "2024-07-05T14:57:29.127704Z",
     "shell.execute_reply": "2024-07-05T14:57:29.126588Z"
    },
    "papermill": {
     "duration": 108.253922,
     "end_time": "2024-07-05T14:57:29.131088",
     "exception": false,
     "start_time": "2024-07-05T14:55:40.877166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      0/ 200000: 27.8817\n",
      "  10000/ 200000: 2.9571\n",
      "  20000/ 200000: 2.5722\n",
      "  30000/ 200000: 2.7646\n",
      "  40000/ 200000: 2.0305\n",
      "  50000/ 200000: 2.5794\n",
      "  60000/ 200000: 2.3242\n",
      "  70000/ 200000: 2.1174\n",
      "  80000/ 200000: 2.2993\n",
      "  90000/ 200000: 2.2481\n",
      " 100000/ 200000: 2.0146\n",
      " 110000/ 200000: 2.4534\n",
      " 120000/ 200000: 1.9164\n",
      " 130000/ 200000: 2.3719\n",
      " 140000/ 200000: 2.2377\n",
      " 150000/ 200000: 2.1441\n",
      " 160000/ 200000: 2.2661\n",
      " 170000/ 200000: 1.7855\n",
      " 180000/ 200000: 2.1126\n",
      " 190000/ 200000: 1.8004\n"
     ]
    }
   ],
   "source": [
    "max_steps = 200000\n",
    "batch_size = 32\n",
    "lossi = []\n",
    "\n",
    "for i in range(max_steps):\n",
    "  \n",
    "  # minibatch construct\n",
    "    ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)\n",
    "    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n",
    "\n",
    "    # forward pass\n",
    "    emb = C[Xb] # embed the characters into vectors\n",
    "    embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n",
    "\n",
    "    # Linear layer\n",
    "    hpreact = embcat @ W1 + b1 # hidden layer pre-activation\n",
    "\n",
    "    # Non-linearity\n",
    "    h = torch.tanh(hpreact) # hidden layer\n",
    "    logits = h @ W2 + b2 # output layer\n",
    "    loss = F.cross_entropy(logits, Yb) # loss function\n",
    "\n",
    "    # backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    \n",
    "  # update\n",
    "    lr = 0.1 if i < 100000 else 0.01 # step learning rate decay\n",
    "    \n",
    "    for p in parameters:\n",
    "        p.data += -lr * p.grad\n",
    "  # track stats\n",
    "    if i % 10000 == 0: # print every once in a while\n",
    "        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n",
    "    lossi.append(loss.log10().item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "75bc3726",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:57:29.166466Z",
     "iopub.status.busy": "2024-07-05T14:57:29.166056Z",
     "iopub.status.idle": "2024-07-05T14:57:29.759856Z",
     "shell.execute_reply": "2024-07-05T14:57:29.758884Z"
    },
    "papermill": {
     "duration": 0.614525,
     "end_time": "2024-07-05T14:57:29.762521",
     "exception": false,
     "start_time": "2024-07-05T14:57:29.147996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7e07b4aa43d0>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(lossi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6081650a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:57:29.797945Z",
     "iopub.status.busy": "2024-07-05T14:57:29.797586Z",
     "iopub.status.idle": "2024-07-05T14:57:30.236485Z",
     "shell.execute_reply": "2024-07-05T14:57:30.235396Z"
    },
    "papermill": {
     "duration": 0.459978,
     "end_time": "2024-07-05T14:57:30.239003",
     "exception": false,
     "start_time": "2024-07-05T14:57:29.779025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train 2.1270017623901367\n",
      "val 2.169905662536621\n"
     ]
    }
   ],
   "source": [
    "@torch.no_grad() # this decorator disables gradient tracking\n",
    "def split_loss(split):\n",
    "    x,y = {\n",
    "    'train': (Xtr, Ytr),\n",
    "    'val': (Xdev, Ydev),\n",
    "    'test': (Xte, Yte),\n",
    "    }[split]\n",
    "    emb = C[x] # (N, block_size, n_embd)\n",
    "    embcat = emb.view(emb.shape[0], -1) # concat into (N, block_size * n_embd)\n",
    "    hpreact = embcat @ W1 + b1   \n",
    "    h = torch.tanh(hpreact) # (N, n_hidden)\n",
    "    logits = h @ W2 + b2 # (N, vocab_size)\n",
    "    loss = F.cross_entropy(logits, y)\n",
    "    print(split, loss.item())\n",
    "\n",
    "split_loss('train')\n",
    "split_loss('val')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "040b7bf7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:57:30.274023Z",
     "iopub.status.busy": "2024-07-05T14:57:30.273254Z",
     "iopub.status.idle": "2024-07-05T14:57:30.323925Z",
     "shell.execute_reply": "2024-07-05T14:57:30.322534Z"
    },
    "papermill": {
     "duration": 0.070675,
     "end_time": "2024-07-05T14:57:30.326355",
     "exception": false,
     "start_time": "2024-07-05T14:57:30.255680",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mona.\n",
      "mayah.\n",
      "seel.\n",
      "nah.\n",
      "yam.\n",
      "ren.\n",
      "ruchadrael.\n",
      "adeero.\n",
      "elin.\n",
      "shy.\n",
      "jen.\n",
      "eden.\n",
      "eson.\n",
      "arleigh.\n",
      "malkia.\n",
      "noshubergihamies.\n",
      "kendretzy.\n",
      "panthona.\n",
      "uszayven.\n",
      "kylene.\n"
     ]
    }
   ],
   "source": [
    "# sample from the model\n",
    "g = torch.Generator().manual_seed(2147483647 + 10)\n",
    "\n",
    "for _ in range(20):\n",
    "    \n",
    "    out = []\n",
    "    context = [0] * block_size # initialize with all ...\n",
    "    while True:\n",
    "      # forward pass the neural net\n",
    "        emb = C[torch.tensor([context])] # (1,block_size,n_embd)\n",
    "        h = torch.tanh(emb.view(1, -1) @ W1 + b1) # concatenate the vectors        \n",
    "        logits = h @ W2 + b2\n",
    "        probs = F.softmax(logits, dim=1)\n",
    "        \n",
    "        # sample from the distribution\n",
    "        ix = torch.multinomial(probs, num_samples=1, generator=g).item()\n",
    "        \n",
    "        # shift the context window and track the samples\n",
    "        context = context[1:] + [ix]\n",
    "        out.append(ix)\n",
    "        # if we sample the special '.' token, break\n",
    "        if ix == 0:\n",
    "            break\n",
    "\n",
    "    print(''.join(itos[i] for i in out)) # decode and print the generated word"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f3965c6",
   "metadata": {
    "papermill": {
     "duration": 0.01644,
     "end_time": "2024-07-05T14:57:30.359610",
     "exception": false,
     "start_time": "2024-07-05T14:57:30.343170",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Network initiazation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a563ad47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:57:30.394525Z",
     "iopub.status.busy": "2024-07-05T14:57:30.394127Z",
     "iopub.status.idle": "2024-07-05T14:57:30.401790Z",
     "shell.execute_reply": "2024-07-05T14:57:30.400555Z"
    },
    "papermill": {
     "duration": 0.027744,
     "end_time": "2024-07-05T14:57:30.404068",
     "exception": false,
     "start_time": "2024-07-05T14:57:30.376324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected loss: 3.295836925506592\n"
     ]
    }
   ],
   "source": [
    "# Observing the loss on the very first epoch, it's a lot higher than the expected loss. The model is confidently incorrect\n",
    "# This happenes due to the logits takes on extreme value \n",
    "# What's the expected loss ? We would expect each character to be no more likely than any other character with prob of 1/27\n",
    "# So the \"expected\" loss for an untrained model should be -log(1/27)\n",
    "print(f\"Expected loss: {-torch.tensor(1/27).log()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "57eb690f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:57:30.439880Z",
     "iopub.status.busy": "2024-07-05T14:57:30.439200Z",
     "iopub.status.idle": "2024-07-05T14:57:30.452448Z",
     "shell.execute_reply": "2024-07-05T14:57:30.451255Z"
    },
    "papermill": {
     "duration": 0.033531,
     "end_time": "2024-07-05T14:57:30.454700",
     "exception": false,
     "start_time": "2024-07-05T14:57:30.421169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss on extreme value of logits: 79.83650970458984\n",
      "Loss on logits with scale down: 8.331460952758789\n",
      "Expected loss: 1.3862943649291992\n"
     ]
    }
   ],
   "source": [
    "# Example when logits take on extrem values\n",
    "logits = torch.randn(4) * 10 #Extreme value on logits\n",
    "Y = torch.randint(0,4,(4,)).float()\n",
    "loss = F.cross_entropy(logits,Y)\n",
    "print(f\"Loss on extreme value of logits: {loss}\")\n",
    "\n",
    "logits = logits * 0.001 # We can try to scale down logits and \n",
    "loss = F.cross_entropy(logits,Y)\n",
    "print(f\"Loss on logits with scale down: {loss}\")\n",
    "print(f\"Expected loss: {-torch.tensor(1/4).log()}\") #Loss is much closer to the expected loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "542b0b40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:57:30.490014Z",
     "iopub.status.busy": "2024-07-05T14:57:30.489615Z",
     "iopub.status.idle": "2024-07-05T14:57:30.499700Z",
     "shell.execute_reply": "2024-07-05T14:57:30.498542Z"
    },
    "papermill": {
     "duration": 0.030403,
     "end_time": "2024-07-05T14:57:30.501964",
     "exception": false,
     "start_time": "2024-07-05T14:57:30.471561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11897\n"
     ]
    }
   ],
   "source": [
    "# How do we initialized so that the logits is small ? Let's make some modification to our code\n",
    "\n",
    "n_embd = 10 # the dimensionality of the character embedding vectors\n",
    "n_hidden = 200 # the number of neurons in the hidden layer of the MLP\n",
    "\n",
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C  = torch.randn((vocab_size, n_embd),            generator=g)\n",
    "W1 = torch.randn((n_embd * block_size, n_hidden), generator=g) \n",
    "b1 = torch.randn(n_hidden,                        generator=g) \n",
    "W2 = torch.randn((n_hidden, vocab_size),          generator=g)*0.01 #Scale down W2 so h@W2 + b2 would be small at initialization\n",
    "b2 = torch.randn(vocab_size,                      generator=g)*0 # Initizalized b2 to 0 in the beginning h@W2 + b2\n",
    "\n",
    "parameters = [C, W1,b1, W2, b2]\n",
    "\n",
    "print(sum(p.nelement() for p in parameters)) # number of parameters in total\n",
    "\n",
    "for p in parameters:\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6c9acc79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:57:30.537471Z",
     "iopub.status.busy": "2024-07-05T14:57:30.536581Z",
     "iopub.status.idle": "2024-07-05T14:59:21.650336Z",
     "shell.execute_reply": "2024-07-05T14:59:21.649365Z"
    },
    "papermill": {
     "duration": 111.134403,
     "end_time": "2024-07-05T14:59:21.653037",
     "exception": false,
     "start_time": "2024-07-05T14:57:30.518634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      0/ 200000: 3.3221\n",
      "  10000/ 200000: 2.1900\n",
      "  20000/ 200000: 2.4196\n",
      "  30000/ 200000: 2.6067\n",
      "  40000/ 200000: 2.0601\n",
      "  50000/ 200000: 2.4988\n",
      "  60000/ 200000: 2.3902\n",
      "  70000/ 200000: 2.1344\n",
      "  80000/ 200000: 2.3369\n",
      "  90000/ 200000: 2.1299\n",
      " 100000/ 200000: 1.8329\n",
      " 110000/ 200000: 2.2053\n",
      " 120000/ 200000: 1.8540\n",
      " 130000/ 200000: 2.4566\n",
      " 140000/ 200000: 2.1879\n",
      " 150000/ 200000: 2.1118\n",
      " 160000/ 200000: 1.8956\n",
      " 170000/ 200000: 1.8645\n",
      " 180000/ 200000: 2.0326\n",
      " 190000/ 200000: 1.8417\n"
     ]
    }
   ],
   "source": [
    "max_steps = 200000\n",
    "batch_size = 32\n",
    "lossi = []\n",
    "\n",
    "for i in range(max_steps):\n",
    "  \n",
    "  # minibatch construct\n",
    "    ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)\n",
    "    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n",
    "\n",
    "    # forward pass\n",
    "    emb = C[Xb] # embed the characters into vectors\n",
    "    embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n",
    "\n",
    "    # Linear layer\n",
    "    hpreact = embcat @ W1 + b1 # hidden layer pre-activation\n",
    "\n",
    "    # Non-linearity\n",
    "    h = torch.tanh(hpreact) # hidden layer\n",
    "    logits = h @ W2 + b2 # output layer\n",
    "    loss = F.cross_entropy(logits, Yb) # loss function\n",
    "\n",
    "    # backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    \n",
    "  # update\n",
    "    lr = 0.1 if i < 100000 else 0.01 # step learning rate decay\n",
    "    \n",
    "    for p in parameters:\n",
    "        p.data += -lr * p.grad\n",
    "  # track stats\n",
    "    if i % 10000 == 0: # print every once in a while\n",
    "        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n",
    "    lossi.append(loss.log10().item())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f7a1d8bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:21.692893Z",
     "iopub.status.busy": "2024-07-05T14:59:21.692516Z",
     "iopub.status.idle": "2024-07-05T14:59:22.800216Z",
     "shell.execute_reply": "2024-07-05T14:59:22.798971Z"
    },
    "papermill": {
     "duration": 1.1303,
     "end_time": "2024-07-05T14:59:22.802639",
     "exception": false,
     "start_time": "2024-07-05T14:59:21.672339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7e07d5e96500>]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The loss of the first epoch is much smaller and the loss grapg doesn't look like the \"hockey stick\" any more.\n",
    "plt.plot(lossi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7c2a807c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:22.844501Z",
     "iopub.status.busy": "2024-07-05T14:59:22.843310Z",
     "iopub.status.idle": "2024-07-05T14:59:23.234477Z",
     "shell.execute_reply": "2024-07-05T14:59:23.233106Z"
    },
    "papermill": {
     "duration": 0.414842,
     "end_time": "2024-07-05T14:59:23.236998",
     "exception": false,
     "start_time": "2024-07-05T14:59:22.822156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train 2.069589138031006\n",
      "val 2.1310746669769287\n"
     ]
    }
   ],
   "source": [
    "@torch.no_grad() # this decorator disables gradient tracking\n",
    "def split_loss(split):\n",
    "    x,y = {\n",
    "    'train': (Xtr, Ytr),\n",
    "    'val': (Xdev, Ydev),\n",
    "    'test': (Xte, Yte),\n",
    "    }[split]\n",
    "    emb = C[x] # (N, block_size, n_embd)\n",
    "    embcat = emb.view(emb.shape[0], -1) # concat into (N, block_size * n_embd)\n",
    "    hpreact = embcat @ W1 + b1   \n",
    "    h = torch.tanh(hpreact) # (N, n_hidden)\n",
    "    logits = h @ W2 + b2 # (N, vocab_size)\n",
    "    loss = F.cross_entropy(logits, y)\n",
    "    print(split, loss.item())\n",
    "\n",
    "split_loss('train') # The loss for both train and val are better now compared to before\n",
    "split_loss('val')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0ae2675",
   "metadata": {
    "papermill": {
     "duration": 0.019502,
     "end_time": "2024-07-05T14:59:23.276328",
     "exception": false,
     "start_time": "2024-07-05T14:59:23.256826",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Dead neuron issue\n",
    "- Let's initizalize the parameters again and check the values of h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "20511f5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:23.317624Z",
     "iopub.status.busy": "2024-07-05T14:59:23.317244Z",
     "iopub.status.idle": "2024-07-05T14:59:23.327767Z",
     "shell.execute_reply": "2024-07-05T14:59:23.326638Z"
    },
    "papermill": {
     "duration": 0.034024,
     "end_time": "2024-07-05T14:59:23.330045",
     "exception": false,
     "start_time": "2024-07-05T14:59:23.296021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11897\n"
     ]
    }
   ],
   "source": [
    "# How do we initialized so that the logits is small ? Let's make some modification to our code\n",
    "# MLP revisited\n",
    "n_embd = 10 # the dimensionality of the character embedding vectors\n",
    "n_hidden = 200 # the number of neurons in the hidden layer of the MLP\n",
    "\n",
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C  = torch.randn((vocab_size, n_embd),            generator=g)\n",
    "W1 = torch.randn((n_embd * block_size, n_hidden), generator=g) \n",
    "b1 = torch.randn(n_hidden,                        generator=g) \n",
    "W2 = torch.randn((n_hidden, vocab_size),          generator=g)*0.01 #Scale down W2 so h@W2 + b2 would be small at initialization\n",
    "b2 = torch.randn(vocab_size,                      generator=g)*0 # Initizalized b2 to 0 in the beginning h@W2 + b2\n",
    "\n",
    "parameters = [C, W1,b1, W2, b2]\n",
    "\n",
    "print(sum(p.nelement() for p in parameters)) # number of parameters in total\n",
    "\n",
    "for p in parameters:\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d9583841",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:23.430745Z",
     "iopub.status.busy": "2024-07-05T14:59:23.429971Z",
     "iopub.status.idle": "2024-07-05T14:59:23.448367Z",
     "shell.execute_reply": "2024-07-05T14:59:23.447181Z"
    },
    "papermill": {
     "duration": 0.100198,
     "end_time": "2024-07-05T14:59:23.450540",
     "exception": false,
     "start_time": "2024-07-05T14:59:23.350342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      0/ 200000: 3.3221\n"
     ]
    }
   ],
   "source": [
    "max_steps = 200000\n",
    "batch_size = 32\n",
    "lossi = []\n",
    "\n",
    "for i in range(max_steps):\n",
    "  \n",
    "  # minibatch construct\n",
    "    ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)\n",
    "    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n",
    "\n",
    "    # forward pass\n",
    "    emb = C[Xb] # embed the characters into vectors\n",
    "    embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n",
    "\n",
    "    # Linear layer\n",
    "    hpreact = embcat @ W1 + b1 # hidden layer pre-activation\n",
    "\n",
    "    # Non-linearity\n",
    "    h = torch.tanh(hpreact) # hidden layer\n",
    "    logits = h @ W2 + b2 # output layer\n",
    "    loss = F.cross_entropy(logits, Yb) # loss function\n",
    "\n",
    "    # backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    \n",
    "  # update\n",
    "    lr = 0.1 if i < 100000 else 0.01 # step learning rate decay\n",
    "    \n",
    "    for p in parameters:\n",
    "        p.data += -lr * p.grad\n",
    "  # track stats\n",
    "    if i % 10000 == 0: # print every once in a while\n",
    "        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n",
    "    lossi.append(loss.log10().item())\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37e92b19",
   "metadata": {
    "papermill": {
     "duration": 0.019414,
     "end_time": "2024-07-05T14:59:23.489954",
     "exception": false,
     "start_time": "2024-07-05T14:59:23.470540",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<p style=\"text-align:center\">\n",
    "  <img src=\"https://production-media.paperswithcode.com/methods/Screen_Shot_2020-05-27_at_4.23.22_PM_dcuMBJl.png\" width=\"300\"/> \n",
    "</p>\n",
    "\n",
    "- Let's look at the tanh function, we have a flat region where all value will be close to -1 and 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f0622334",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:23.531619Z",
     "iopub.status.busy": "2024-07-05T14:59:23.530814Z",
     "iopub.status.idle": "2024-07-05T14:59:23.922213Z",
     "shell.execute_reply": "2024-07-05T14:59:23.921070Z"
    },
    "papermill": {
     "duration": 0.414698,
     "end_time": "2024-07-05T14:59:23.924645",
     "exception": false,
     "start_time": "2024-07-05T14:59:23.509947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([  2.,   2.,   1.,   4.,   2.,   4.,   6.,  15.,   5.,  25.,  32.,\n",
       "         49.,  56.,  59.,  92., 119., 134., 197., 195., 221., 257., 275.,\n",
       "        297., 341., 353., 375., 369., 349., 358., 362., 271., 312., 229.,\n",
       "        206., 190., 167.,  87., 111.,  72.,  55.,  41.,  22.,  23.,  18.,\n",
       "         17.,   8.,   5.,   7.,   2.,   1.]),\n",
       " array([-19.05793571, -18.31571732, -17.57349892, -16.83128052,\n",
       "        -16.08906212, -15.34684372, -14.60462532, -13.86240692,\n",
       "        -13.12018852, -12.37797012, -11.63575172, -10.89353333,\n",
       "        -10.15131493,  -9.40909653,  -8.66687813,  -7.92465973,\n",
       "         -7.18244133,  -6.44022293,  -5.69800453,  -4.95578613,\n",
       "         -4.21356773,  -3.47134933,  -2.72913094,  -1.98691254,\n",
       "         -1.24469414,  -0.50247574,   0.23974266,   0.98196106,\n",
       "          1.72417946,   2.46639786,   3.20861626,   3.95083466,\n",
       "          4.69305305,   5.43527145,   6.17748985,   6.91970825,\n",
       "          7.66192665,   8.40414505,   9.14636345,   9.88858185,\n",
       "         10.63080025,  11.37301865,  12.11523705,  12.85745544,\n",
       "         13.59967384,  14.34189224,  15.08411064,  15.82632904,\n",
       "         16.56854744,  17.31076584,  18.05298424]),\n",
       " <BarContainer object of 50 artists>)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(hpreact.view(-1).tolist(), 50) # Value of hpreact take on from range ~ -18 to 18 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "dfe4700b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:23.967747Z",
     "iopub.status.busy": "2024-07-05T14:59:23.967087Z",
     "iopub.status.idle": "2024-07-05T14:59:24.349227Z",
     "shell.execute_reply": "2024-07-05T14:59:24.348176Z"
    },
    "papermill": {
     "duration": 0.406157,
     "end_time": "2024-07-05T14:59:24.351559",
     "exception": false,
     "start_time": "2024-07-05T14:59:23.945402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([2069.,  144.,  106.,   82.,   59.,   56.,   44.,   30.,   43.,\n",
       "          26.,   16.,   38.,   16.,   32.,   24.,   14.,   28.,   27.,\n",
       "          26.,   19.,   24.,   26.,   30.,   14.,   19.,   19.,   22.,\n",
       "          26.,   18.,   12.,   10.,   33.,   27.,   32.,   17.,   24.,\n",
       "          30.,   22.,   26.,   29.,   26.,   40.,   29.,   41.,   49.,\n",
       "          64.,   62.,  100.,  188., 2442.]),\n",
       " array([-1.  , -0.96, -0.92, -0.88, -0.84, -0.8 , -0.76, -0.72, -0.68,\n",
       "        -0.64, -0.6 , -0.56, -0.52, -0.48, -0.44, -0.4 , -0.36, -0.32,\n",
       "        -0.28, -0.24, -0.2 , -0.16, -0.12, -0.08, -0.04,  0.  ,  0.04,\n",
       "         0.08,  0.12,  0.16,  0.2 ,  0.24,  0.28,  0.32,  0.36,  0.4 ,\n",
       "         0.44,  0.48,  0.52,  0.56,  0.6 ,  0.64,  0.68,  0.72,  0.76,\n",
       "         0.8 ,  0.84,  0.88,  0.92,  0.96,  1.  ]),\n",
       " <BarContainer object of 50 artists>)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(h.view(-1).tolist(), 50) \n",
    "# tanh \"squashed\" the value of hpreact to wihin the range of -1 to 1,\n",
    "# and currently majority of value take on -1 and 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "253cdefb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:24.395958Z",
     "iopub.status.busy": "2024-07-05T14:59:24.395229Z",
     "iopub.status.idle": "2024-07-05T14:59:24.743552Z",
     "shell.execute_reply": "2024-07-05T14:59:24.742409Z"
    },
    "papermill": {
     "duration": 0.373285,
     "end_time": "2024-07-05T14:59:24.746064",
     "exception": false,
     "start_time": "2024-07-05T14:59:24.372779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7e07b637bf40>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize how many of the value in the region of tanh = 1 or -1, the white pixels are value in this region of tanh\n",
    "plt.figure(figsize = (20,10))\n",
    "plt.imshow(h.abs() > 0.99, cmap = \"gray\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0885174",
   "metadata": {
    "papermill": {
     "duration": 0.021237,
     "end_time": "2024-07-05T14:59:24.788975",
     "exception": false,
     "start_time": "2024-07-05T14:59:24.767738",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    " Why is this a problem ?\n",
    "- Recall from micrograd lecture, the gradient of the node is calcualted as `self.grad = (1-t**2) * out.grad` where `t` is the `tanh(x)`\n",
    "We can see the self.grad is going to vanish when t is close or equal to 1,which make the weights not updating during the update `W += -lr*grad`. We might have \"dead\" neuron if all the examples are in a batch are -1 or 1, all the updates to the weight are 0 and the neuron will never learn."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73b7f44e",
   "metadata": {
    "papermill": {
     "duration": 0.021408,
     "end_time": "2024-07-05T14:59:24.832160",
     "exception": false,
     "start_time": "2024-07-05T14:59:24.810752",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Let's optimize the initialization manualy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "457535ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:24.876966Z",
     "iopub.status.busy": "2024-07-05T14:59:24.876536Z",
     "iopub.status.idle": "2024-07-05T14:59:24.887042Z",
     "shell.execute_reply": "2024-07-05T14:59:24.885946Z"
    },
    "papermill": {
     "duration": 0.035695,
     "end_time": "2024-07-05T14:59:24.889342",
     "exception": false,
     "start_time": "2024-07-05T14:59:24.853647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11897\n"
     ]
    }
   ],
   "source": [
    "n_embd = 10 # the dimensionality of the character embedding vectors\n",
    "n_hidden = 200 # the number of neurons in the hidden layer of the MLP\n",
    "\n",
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C  = torch.randn((vocab_size, n_embd),            generator=g)\n",
    "W1 = torch.randn((n_embd * block_size, n_hidden), generator=g)*0.2 # Scale down W1 to make hpreact within the range\n",
    "b1 = torch.randn(n_hidden,                        generator=g)*0.01 # Slight variation before going to tanh\n",
    "W2 = torch.randn((n_hidden, vocab_size),          generator=g)*0.01 #Scale down W2 so h@W2 + b2 would be small at initialization\n",
    "b2 = torch.randn(vocab_size,                      generator=g)*0 # Initizalized b2 to 0 in the beginning h@W2 + b2\n",
    "\n",
    "parameters = [C, W1,b1, W2, b2]\n",
    "\n",
    "print(sum(p.nelement() for p in parameters)) # number of parameters in total\n",
    "\n",
    "for p in parameters:\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "61120f37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:24.934790Z",
     "iopub.status.busy": "2024-07-05T14:59:24.933873Z",
     "iopub.status.idle": "2024-07-05T14:59:24.946371Z",
     "shell.execute_reply": "2024-07-05T14:59:24.945245Z"
    },
    "papermill": {
     "duration": 0.037741,
     "end_time": "2024-07-05T14:59:24.948662",
     "exception": false,
     "start_time": "2024-07-05T14:59:24.910921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      0/ 200000: 3.3135\n"
     ]
    }
   ],
   "source": [
    "max_steps = 200000\n",
    "batch_size = 32\n",
    "lossi = []\n",
    "\n",
    "for i in range(max_steps):\n",
    "  \n",
    "  # minibatch construct\n",
    "    ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)\n",
    "    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n",
    "\n",
    "    # forward pass\n",
    "    emb = C[Xb] # embed the characters into vectors\n",
    "    embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n",
    "\n",
    "    # Linear layer\n",
    "    hpreact = embcat @ W1 + b1 # hidden layer pre-activation\n",
    "\n",
    "    # Non-linearity\n",
    "    h = torch.tanh(hpreact) # hidden layer\n",
    "    logits = h @ W2 + b2 # output layer\n",
    "    loss = F.cross_entropy(logits, Yb) # loss function\n",
    "\n",
    "    # backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    \n",
    "  # update\n",
    "    lr = 0.1 if i < 100000 else 0.01 # step learning rate decay\n",
    "    \n",
    "    for p in parameters:\n",
    "        p.data += -lr * p.grad\n",
    "  # track stats\n",
    "    if i % 10000 == 0: # print every once in a while\n",
    "        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n",
    "    lossi.append(loss.log10().item())\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "eddc7cb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:24.993371Z",
     "iopub.status.busy": "2024-07-05T14:59:24.992993Z",
     "iopub.status.idle": "2024-07-05T14:59:25.334184Z",
     "shell.execute_reply": "2024-07-05T14:59:25.332982Z"
    },
    "papermill": {
     "duration": 0.366359,
     "end_time": "2024-07-05T14:59:25.336557",
     "exception": false,
     "start_time": "2024-07-05T14:59:24.970198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7e07b49e7940>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize how many of the value in the region of tanh = 1 or -1, the white pixels are value in this region of tanh\n",
    "plt.figure(figsize = (20,10))\n",
    "plt.imshow(h.abs() > 0.99, cmap = \"gray\") # Much better"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd785ac6",
   "metadata": {
    "papermill": {
     "duration": 0.021811,
     "end_time": "2024-07-05T14:59:25.380499",
     "exception": false,
     "start_time": "2024-07-05T14:59:25.358688",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## How do we choose the scaling for the weights and biases\n",
    "\n",
    "- Let's start with an example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "39eea493",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:25.426803Z",
     "iopub.status.busy": "2024-07-05T14:59:25.425974Z",
     "iopub.status.idle": "2024-07-05T14:59:26.935990Z",
     "shell.execute_reply": "2024-07-05T14:59:26.934876Z"
    },
    "papermill": {
     "duration": 1.535723,
     "end_time": "2024-07-05T14:59:26.938138",
     "exception": false,
     "start_time": "2024-07-05T14:59:25.402415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x mean: -0.0021584334317594767 x standard deviation: 1.0092244148254395\n",
      "y mean: -0.013340608216822147 y standard deviation: 3.2072293758392334\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([1.29070739e-05, 1.93606108e-05, 2.58141478e-05, 9.68030541e-05,\n",
       "        1.41977813e-04, 1.87152571e-04, 5.61457714e-04, 6.90528453e-04,\n",
       "        1.21326495e-03, 2.17484195e-03, 3.71078374e-03, 6.58260768e-03,\n",
       "        1.01255995e-02, 1.58886080e-02, 2.36844806e-02, 3.58558512e-02,\n",
       "        5.12927116e-02, 6.96530242e-02, 8.92911371e-02, 1.09974723e-01,\n",
       "        1.24772683e-01, 1.30090398e-01, 1.29128821e-01, 1.18267518e-01,\n",
       "        9.97458670e-02, 8.06240370e-02, 6.12634262e-02, 4.37743411e-02,\n",
       "        2.97249912e-02, 2.01285817e-02, 1.27392819e-02, 7.70552311e-03,\n",
       "        4.92404869e-03, 2.86537040e-03, 1.63274485e-03, 9.74484078e-04,\n",
       "        4.96922345e-04, 3.03316236e-04, 1.74245497e-04, 8.38959802e-05,\n",
       "        6.45353694e-05, 1.93606108e-05, 6.45353694e-06, 6.45353694e-06,\n",
       "        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "        0.00000000e+00, 6.45353694e-06]),\n",
       " array([-16.87338257, -16.09861362, -15.32384468, -14.54907574,\n",
       "        -13.77430679, -12.99953785, -12.22476891, -11.44999996,\n",
       "        -10.67523102,  -9.90046207,  -9.12569313,  -8.35092419,\n",
       "         -7.57615524,  -6.8013863 ,  -6.02661736,  -5.25184841,\n",
       "         -4.47707947,  -3.70231052,  -2.92754158,  -2.15277264,\n",
       "         -1.37800369,  -0.60323475,   0.17153419,   0.94630314,\n",
       "          1.72107208,   2.49584103,   3.27060997,   4.04537891,\n",
       "          4.82014786,   5.5949168 ,   6.36968575,   7.14445469,\n",
       "          7.91922363,   8.69399258,   9.46876152,  10.24353046,\n",
       "         11.01829941,  11.79306835,  12.5678373 ,  13.34260624,\n",
       "         14.11737518,  14.89214413,  15.66691307,  16.44168201,\n",
       "         17.21645096,  17.9912199 ,  18.76598885,  19.54075779,\n",
       "         20.31552673,  21.09029568,  21.86506462]),\n",
       " <BarContainer object of 50 artists>)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = torch.randn(1000,10)\n",
    "w = torch.randn(10,200)\n",
    "y = x @ w\n",
    "print(f\"x mean: {x.mean()} x standard deviation: {x.std()}\")\n",
    "print(f\"y mean: {y.mean()} y standard deviation: {y.std()}\")\n",
    "plt.figure(figsize = (20,5))\n",
    "plt.subplot(121)\n",
    "plt.hist(x.view(-1).tolist(), 50, density = True)\n",
    "plt.subplot(122)\n",
    "plt.hist(y.view(-1).tolist(), 50, density = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e9c8455",
   "metadata": {
    "papermill": {
     "duration": 0.022264,
     "end_time": "2024-07-05T14:59:26.982893",
     "exception": false,
     "start_time": "2024-07-05T14:59:26.960629",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We have the same mean for y but the deviation increased, but we want to keep the distribution throughout the neural net roughly Gaussian so that the gradients are in a good range.\n",
    "\n",
    "One way to do this is [Kaiming Initialization](https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.kaiming_uniform_) \n",
    "- Note: we have to check the [\"gain\"](https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.calculate_gain) depending on the acivation function, since the activation function \"squashed\" the data down and we need the gain to \"fight back\"\n",
    "- Another Note: This initialization does not need to be as precise as when the [paper](https://arxiv.org/abs/1502.01852) was written, modern innovations make the training much more stable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d2e8a41c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:27.031122Z",
     "iopub.status.busy": "2024-07-05T14:59:27.030708Z",
     "iopub.status.idle": "2024-07-05T14:59:28.502007Z",
     "shell.execute_reply": "2024-07-05T14:59:28.500911Z"
    },
    "papermill": {
     "duration": 1.498009,
     "end_time": "2024-07-05T14:59:28.504389",
     "exception": false,
     "start_time": "2024-07-05T14:59:27.006380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x mean: 0.01710987463593483 x standard deviation: 1.0089107751846313\n",
      "y mean: -0.0022671381011605263 y standard deviation: 1.0055296421051025\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([1.81762391e-05, 1.81762391e-05, 1.81762391e-05, 5.45287173e-05,\n",
       "        5.45287173e-05, 3.63524782e-05, 5.45287173e-05, 1.27233674e-04,\n",
       "        2.54467347e-04, 6.72520846e-04, 9.26988193e-04, 1.74491895e-03,\n",
       "        3.90789140e-03, 6.19809753e-03, 1.10511534e-02, 1.82852965e-02,\n",
       "        3.25718204e-02, 5.17477527e-02, 8.56100861e-02, 1.28833183e-01,\n",
       "        1.89487292e-01, 2.66281903e-01, 3.39132269e-01, 4.02149290e-01,\n",
       "        4.30540575e-01, 4.12746037e-01, 3.56944983e-01, 2.87311811e-01,\n",
       "        2.14970380e-01, 1.47245713e-01, 9.67157682e-02, 6.05995811e-02,\n",
       "        3.66432980e-02, 2.08117938e-02, 1.39411754e-02, 7.61584418e-03,\n",
       "        4.68946968e-03, 2.09026749e-03, 1.27233674e-03, 9.26988193e-04,\n",
       "        5.27110934e-04, 2.18114869e-04, 9.08811954e-05, 3.63524782e-05,\n",
       "        3.63524782e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "        0.00000000e+00, 3.63524782e-05]),\n",
       " array([-6.7836833 , -6.50859889, -6.23351448, -5.95843007, -5.68334566,\n",
       "        -5.40826125, -5.13317684, -4.85809243, -4.58300802, -4.30792361,\n",
       "        -4.0328392 , -3.75775479, -3.48267038, -3.20758597, -2.93250156,\n",
       "        -2.65741715, -2.38233274, -2.10724833, -1.83216393, -1.55707952,\n",
       "        -1.28199511, -1.0069107 , -0.73182629, -0.45674188, -0.18165747,\n",
       "         0.09342694,  0.36851135,  0.64359576,  0.91868017,  1.19376458,\n",
       "         1.46884899,  1.7439334 ,  2.01901781,  2.29410222,  2.56918663,\n",
       "         2.84427104,  3.11935545,  3.39443986,  3.66952427,  3.94460868,\n",
       "         4.21969309,  4.4947775 ,  4.76986191,  5.04494632,  5.32003073,\n",
       "         5.59511514,  5.87019955,  6.14528396,  6.42036837,  6.69545278,\n",
       "         6.97053719]),\n",
       " <BarContainer object of 50 artists>)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = torch.randn(1000,10)\n",
    "w = torch.randn(10,200) / (10**0.5) # Gain is 1 for linear, and fan_in is \n",
    "y = x @ w\n",
    "print(f\"x mean: {x.mean()} x standard deviation: {x.std()}\")\n",
    "print(f\"y mean: {y.mean()} y standard deviation: {y.std()}\") # Standard deviation is now 1\n",
    "plt.figure(figsize = (20,5))\n",
    "plt.subplot(121)\n",
    "plt.hist(x.view(-1).tolist(), 50, density = True)\n",
    "plt.subplot(122)\n",
    "plt.hist(y.view(-1).tolist(), 50, density = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c00bceda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:28.553102Z",
     "iopub.status.busy": "2024-07-05T14:59:28.552703Z",
     "iopub.status.idle": "2024-07-05T14:59:28.563779Z",
     "shell.execute_reply": "2024-07-05T14:59:28.562606Z"
    },
    "papermill": {
     "duration": 0.038054,
     "end_time": "2024-07-05T14:59:28.566021",
     "exception": false,
     "start_time": "2024-07-05T14:59:28.527967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11897\n"
     ]
    }
   ],
   "source": [
    "# Let's try with the model\n",
    "n_embd = 10 # the dimensionality of the character embedding vectors\n",
    "n_hidden = 200 # the number of neurons in the hidden layer of the MLP\n",
    "\n",
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C  = torch.randn((vocab_size, n_embd),            generator=g)\n",
    "W1 = torch.randn((n_embd * block_size, n_hidden), generator=g)*(5/3)/((n_embd * block_size)**0.5) # Gain and fan_in\n",
    "b1 = torch.randn(n_hidden,                        generator=g)*0.01 # Slight variation before going to tanh\n",
    "W2 = torch.randn((n_hidden, vocab_size),          generator=g)*0.01 #Scale down W2 so h@W2 + b2 would be small at initialization\n",
    "b2 = torch.randn(vocab_size,                      generator=g)*0 # Initizalized b2 to 0 in the beginning h@W2 + b2\n",
    "\n",
    "parameters = [C, W1,b1, W2, b2]\n",
    "\n",
    "print(sum(p.nelement() for p in parameters)) # number of parameters in total\n",
    "\n",
    "for p in parameters:\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "79801d61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T14:59:28.615579Z",
     "iopub.status.busy": "2024-07-05T14:59:28.615173Z",
     "iopub.status.idle": "2024-07-05T15:01:21.018197Z",
     "shell.execute_reply": "2024-07-05T15:01:21.016977Z"
    },
    "papermill": {
     "duration": 112.43118,
     "end_time": "2024-07-05T15:01:21.021010",
     "exception": false,
     "start_time": "2024-07-05T14:59:28.589830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      0/ 200000: 3.3179\n",
      "  10000/ 200000: 2.1910\n",
      "  20000/ 200000: 2.3270\n",
      "  30000/ 200000: 2.5396\n",
      "  40000/ 200000: 1.9468\n",
      "  50000/ 200000: 2.3331\n",
      "  60000/ 200000: 2.3852\n",
      "  70000/ 200000: 2.1173\n",
      "  80000/ 200000: 2.3159\n",
      "  90000/ 200000: 2.2010\n",
      " 100000/ 200000: 1.8591\n",
      " 110000/ 200000: 2.0881\n",
      " 120000/ 200000: 1.9389\n",
      " 130000/ 200000: 2.3913\n",
      " 140000/ 200000: 2.0949\n",
      " 150000/ 200000: 2.1458\n",
      " 160000/ 200000: 1.7824\n",
      " 170000/ 200000: 1.7249\n",
      " 180000/ 200000: 1.9752\n",
      " 190000/ 200000: 1.8614\n"
     ]
    }
   ],
   "source": [
    "max_steps = 200000\n",
    "batch_size = 32\n",
    "lossi = []\n",
    "\n",
    "for i in range(max_steps):\n",
    "  \n",
    "  # minibatch construct\n",
    "    ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)\n",
    "    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n",
    "\n",
    "    # forward pass\n",
    "    emb = C[Xb] # embed the characters into vectors\n",
    "    embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n",
    "\n",
    "    # Linear layer\n",
    "    hpreact = embcat @ W1 + b1 # hidden layer pre-activation\n",
    "\n",
    "    # Non-linearity\n",
    "    h = torch.tanh(hpreact) # hidden layer\n",
    "    logits = h @ W2 + b2 # output layer\n",
    "    loss = F.cross_entropy(logits, Yb) # loss function\n",
    "\n",
    "    # backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    \n",
    "  # update\n",
    "    lr = 0.1 if i < 100000 else 0.01 # step learning rate decay\n",
    "    \n",
    "    for p in parameters:\n",
    "        p.data += -lr * p.grad\n",
    "  # track stats\n",
    "    if i % 10000 == 0: # print every once in a while\n",
    "        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n",
    "    lossi.append(loss.log10().item())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8697c3e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T15:01:21.074691Z",
     "iopub.status.busy": "2024-07-05T15:01:21.073957Z",
     "iopub.status.idle": "2024-07-05T15:01:21.470390Z",
     "shell.execute_reply": "2024-07-05T15:01:21.469289Z"
    },
    "papermill": {
     "duration": 0.425989,
     "end_time": "2024-07-05T15:01:21.473005",
     "exception": false,
     "start_time": "2024-07-05T15:01:21.047016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train 2.0376641750335693\n",
      "val 2.106989622116089\n"
     ]
    }
   ],
   "source": [
    "@torch.no_grad() # this decorator disables gradient tracking\n",
    "def split_loss(split):\n",
    "    x,y = {\n",
    "    'train': (Xtr, Ytr),\n",
    "    'val': (Xdev, Ydev),\n",
    "    'test': (Xte, Yte),\n",
    "    }[split]\n",
    "    emb = C[x] # (N, block_size, n_embd)\n",
    "    embcat = emb.view(emb.shape[0], -1) # concat into (N, block_size * n_embd)\n",
    "    hpreact = embcat @ W1 + b1   \n",
    "    h = torch.tanh(hpreact) # (N, n_hidden)\n",
    "    logits = h @ W2 + b2 # (N, vocab_size)\n",
    "    loss = F.cross_entropy(logits, y)\n",
    "    print(split, loss.item())\n",
    "\n",
    "split_loss('train') # The loss for both train and val are better now compared to before\n",
    "split_loss('val')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3da24dc8",
   "metadata": {
    "papermill": {
     "duration": 0.025586,
     "end_time": "2024-07-05T15:01:21.526103",
     "exception": false,
     "start_time": "2024-07-05T15:01:21.500517",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Batch Normalization\n",
    "- One of the modern innovation is the batch normalization\n",
    "\n",
    "<p style=\"text-align:center\">\n",
    "  <img src=\"https://qph.cf2.quoracdn.net/main-qimg-f8bb694285eec807426c1d9eb11b318e-pjlq\" width=\"400\"/> \n",
    "</p>\n",
    "\n",
    "- Note: we only want to keep the normalization to the initialization but not forcing the Gaussian distribution so we need\n",
    " Batch Norm gain and bias to sacle and shift the distribution.\n",
    " \n",
    " - The \"cost\" for this technique is the coupling of previous examples to the Batch Normalization, which make the calculation of `hpreact` jiggle so it's also a regularization technique\n",
    " - The epsilon is a small constant to prevent the equation from 0 division\n",
    " - The bias in hpreact = embcat @ W1 + b1 before the batchnorm is then subtracted during batch norm calculation so it will not have any effect. We can remove this to improve the model efficientcy\n",
    " - Bacth Norm is usually place after a multiplication layer\n",
    " - PyTorch's [batch norm](https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm1d.html#torch.nn.BatchNorm1d) implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f7fa09a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T15:01:21.579713Z",
     "iopub.status.busy": "2024-07-05T15:01:21.578855Z",
     "iopub.status.idle": "2024-07-05T15:01:21.591219Z",
     "shell.execute_reply": "2024-07-05T15:01:21.590122Z"
    },
    "papermill": {
     "duration": 0.041703,
     "end_time": "2024-07-05T15:01:21.593569",
     "exception": false,
     "start_time": "2024-07-05T15:01:21.551866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12097\n"
     ]
    }
   ],
   "source": [
    "# Let's try with the model\n",
    "n_embd = 10 # the dimensionality of the character embedding vectors\n",
    "n_hidden = 200 # the number of neurons in the hidden layer of the MLP\n",
    "epsilon = 1e-6\n",
    "\n",
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C  = torch.randn((vocab_size, n_embd),            generator=g)\n",
    "W1 = torch.randn((n_embd * block_size, n_hidden), generator=g)*(5/3)/((n_embd * block_size)**0.5) # Gain and fan_in\n",
    "# b1 = torch.randn(n_hidden,                        generator=g)*0.01 #No longer needed\n",
    "W2 = torch.randn((n_hidden, vocab_size),          generator=g)*0.01 #Scale down W2 so h@W2 + b2 would be small at initialization\n",
    "b2 = torch.randn(vocab_size,                      generator=g)*0 # Initizalized b2 to 0 in the beginning h@W2 + b2\n",
    "bngain = torch.ones((1,n_hidden))\n",
    "bnbias = torch.zeros((1,n_hidden)) #This is working in place for b1\n",
    "bnmean_running = torch.zeros((1,n_hidden)) # We can use this to estimate the mean of the dataset, https://en.wikipedia.org/wiki/Exponential_smoothing\n",
    "bnstd_running = torch.ones((1,n_hidden)) # Estimate std for the whole dataset\n",
    "\n",
    "\n",
    "parameters = [C, W1, W2, b2, bngain, bnbias]\n",
    "\n",
    "print(sum(p.nelement() for p in parameters)) # number of parameters in total\n",
    "\n",
    "for p in parameters:\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "dcadc735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T15:01:21.648755Z",
     "iopub.status.busy": "2024-07-05T15:01:21.647601Z",
     "iopub.status.idle": "2024-07-05T15:04:49.231344Z",
     "shell.execute_reply": "2024-07-05T15:04:49.230188Z"
    },
    "papermill": {
     "duration": 207.614147,
     "end_time": "2024-07-05T15:04:49.234432",
     "exception": false,
     "start_time": "2024-07-05T15:01:21.620285",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      0/ 200000: 3.3239\n",
      "  10000/ 200000: 2.0322\n",
      "  20000/ 200000: 2.5675\n",
      "  30000/ 200000: 2.0125\n",
      "  40000/ 200000: 2.2446\n",
      "  50000/ 200000: 1.8897\n",
      "  60000/ 200000: 2.0785\n",
      "  70000/ 200000: 2.3681\n",
      "  80000/ 200000: 2.2918\n",
      "  90000/ 200000: 2.0238\n",
      " 100000/ 200000: 2.3673\n",
      " 110000/ 200000: 2.3132\n",
      " 120000/ 200000: 1.6414\n",
      " 130000/ 200000: 1.9311\n",
      " 140000/ 200000: 2.2231\n",
      " 150000/ 200000: 2.0027\n",
      " 160000/ 200000: 2.0997\n",
      " 170000/ 200000: 2.4949\n",
      " 180000/ 200000: 2.0199\n",
      " 190000/ 200000: 2.1707\n"
     ]
    }
   ],
   "source": [
    "# same optimization as last time\n",
    "max_steps = 200000\n",
    "batch_size = 32\n",
    "lossi = []\n",
    "\n",
    "for i in range(max_steps):\n",
    "  \n",
    "    # minibatch construct\n",
    "    ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)\n",
    "    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n",
    "\n",
    "    # forward pass\n",
    "    emb = C[Xb] # embed the characters into vectors\n",
    "    embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n",
    "    # Linear layer\n",
    "    hpreact = embcat @ W1 #+ b1 # hidden layer pre-activation\n",
    "    # BatchNorm layer\n",
    "    # -------------------------------------------------------------\n",
    "    bnmeani = hpreact.mean(0, keepdim=True)\n",
    "    bnstdi = hpreact.std(0, keepdim=True)\n",
    "    hpreact = bngain * (hpreact - bnmeani) / bnstdi + bnbias\n",
    "    with torch.no_grad():\n",
    "        bnmean_running = 0.999 * bnmean_running + 0.001 * bnmeani #0.001 is equivalent to the momentum in PyTorch's implementation\n",
    "        bnstd_running = 0.999 * bnstd_running + 0.001 * bnstdi\n",
    "    # Note: with smaller batch size, we might want to reduce the default 0.1 momentum in PyTorch's implementation\n",
    "    # The batch mean and std might vary a lot with smaller batch size\n",
    "    # We do the running mean and running std so that we don't have to calculate a separate mean and std for the whole dataset as another stage\n",
    "    # The running mean and running std are close enough to the actual mean and std\n",
    "  # -------------------------------------------------------------\n",
    "  # Non-linearity\n",
    "    h = torch.tanh(hpreact) # hidden layer\n",
    "    logits = h @ W2 + b2 # output layer\n",
    "    loss = F.cross_entropy(logits, Yb) # loss function\n",
    "  \n",
    "  # backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "\n",
    "  # update\n",
    "    lr = 0.1 if i < 100000 else 0.01 # step learning rate decay\n",
    "    for p in parameters:\n",
    "        p.data += -lr * p.grad\n",
    "\n",
    "  # track stats\n",
    "    if i % 10000 == 0: # print every once in a while\n",
    "        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n",
    "    lossi.append(loss.log10().item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5c550144",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T15:04:49.294005Z",
     "iopub.status.busy": "2024-07-05T15:04:49.292658Z",
     "iopub.status.idle": "2024-07-05T15:04:49.638740Z",
     "shell.execute_reply": "2024-07-05T15:04:49.637405Z"
    },
    "papermill": {
     "duration": 0.377893,
     "end_time": "2024-07-05T15:04:49.641699",
     "exception": false,
     "start_time": "2024-07-05T15:04:49.263806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# calibrate the batch norm at the end of training, calcualte the mean and std for the whole dataset instead of a batch\n",
    "# and compared this to the running mean and std\n",
    "\n",
    "with torch.no_grad():\n",
    "    # pass the training set through\n",
    "    emb = C[Xtr]\n",
    "    embcat = emb.view(emb.shape[0], -1)\n",
    "    hpreact = embcat @ W1 # + b1\n",
    "    # measure the mean/std over the entire training set\n",
    "    bnmean = hpreact.mean(0, keepdim=True)\n",
    "    bnstd = hpreact.std(0, keepdim=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0676188a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T15:04:49.700617Z",
     "iopub.status.busy": "2024-07-05T15:04:49.699515Z",
     "iopub.status.idle": "2024-07-05T15:04:50.395153Z",
     "shell.execute_reply": "2024-07-05T15:04:50.393811Z"
    },
    "papermill": {
     "duration": 0.727152,
     "end_time": "2024-07-05T15:04:50.397759",
     "exception": false,
     "start_time": "2024-07-05T15:04:49.670607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train 2.1036415100097656\n",
      "val 2.1395351886749268\n"
     ]
    }
   ],
   "source": [
    "@torch.no_grad() # this decorator disables gradient tracking\n",
    "#Calculating the loss with the mean and std of the whole dataset\n",
    "def split_loss(split):\n",
    "    x,y = {\n",
    "    'train': (Xtr, Ytr),\n",
    "    'val': (Xdev, Ydev),\n",
    "    'test': (Xte, Yte),\n",
    "    }[split]\n",
    "    emb = C[x] # (N, block_size, n_embd)\n",
    "    embcat = emb.view(emb.shape[0], -1) # concat into (N, block_size * n_embd)\n",
    "    \n",
    "    hpreact = embcat @ W1 + b1\n",
    "    \n",
    "    hpreact = bngain * (hpreact - bnmean) / bnstd + bnbias #Mean and std on the whole dataset\n",
    "\n",
    "    h = torch.tanh(hpreact) # (N, n_hidden)\n",
    "    logits = h @ W2 + b2 # (N, vocab_size)\n",
    "    loss = F.cross_entropy(logits, y)\n",
    "    print(split, loss.item())\n",
    "\n",
    "split_loss('train') # The loss for both train and val are better now compared to before\n",
    "split_loss('val')    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "410b58ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-05T15:04:50.455476Z",
     "iopub.status.busy": "2024-07-05T15:04:50.455037Z",
     "iopub.status.idle": "2024-07-05T15:04:51.084632Z",
     "shell.execute_reply": "2024-07-05T15:04:51.083511Z"
    },
    "papermill": {
     "duration": 0.66142,
     "end_time": "2024-07-05T15:04:51.087261",
     "exception": false,
     "start_time": "2024-07-05T15:04:50.425841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train 2.103177547454834\n",
      "val 2.13948655128479\n"
     ]
    }
   ],
   "source": [
    "@torch.no_grad() # this decorator disables gradient tracking\n",
    "#Calculating the loss with the running mean and running std\n",
    "def split_loss(split):\n",
    "    x,y = {\n",
    "    'train': (Xtr, Ytr),\n",
    "    'val': (Xdev, Ydev),\n",
    "    'test': (Xte, Yte),\n",
    "    }[split]\n",
    "    emb = C[x] # (N, block_size, n_embd)\n",
    "    embcat = emb.view(emb.shape[0], -1) # concat into (N, block_size * n_embd)\n",
    "    \n",
    "    hpreact = embcat @ W1 + b1\n",
    "    \n",
    "    hpreact = bngain * (hpreact - bnmean_running) / bnstd_running + bnbias #Running mean and running std\n",
    "\n",
    "    h = torch.tanh(hpreact) # (N, n_hidden)\n",
    "    logits = h @ W2 + b2 # (N, vocab_size)\n",
    "    loss = F.cross_entropy(logits, y)\n",
    "    print(split, loss.item())\n",
    "\n",
    "split_loss('train') # The loss for both train and val are better now compared to before\n",
    "split_loss('val')    \n",
    "# The loss is basically the same as before"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 559.956985,
   "end_time": "2024-07-05T15:04:52.039588",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-05T14:55:32.082603",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
