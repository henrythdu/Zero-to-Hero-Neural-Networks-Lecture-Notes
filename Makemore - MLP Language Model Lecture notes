{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4fea0880",
   "metadata": {
    "papermill": {
     "duration": 0.015297,
     "end_time": "2024-07-02T17:30:56.667754",
     "exception": false,
     "start_time": "2024-07-02T17:30:56.652457",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "\n",
    "Lecture note from Andreij Karpathy's Makemore: MLP lecture\n",
    "\n",
    "- In the previous lecture - the language model is a bigram model. The bigram model only takes in the context of 1 previous token to predict the subsequence one.\n",
    "- In this notebook we will build a MLP language model with more context windows. We will implement a model from this paper - https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c38c4f8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:30:56.699575Z",
     "iopub.status.busy": "2024-07-02T17:30:56.699174Z",
     "iopub.status.idle": "2024-07-02T17:31:00.299925Z",
     "shell.execute_reply": "2024-07-02T17:31:00.298633Z"
    },
    "papermill": {
     "duration": 3.619614,
     "end_time": "2024-07-02T17:31:00.302637",
     "exception": false,
     "start_time": "2024-07-02T17:30:56.683023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn.functional as F\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0c6edfe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:00.338588Z",
     "iopub.status.busy": "2024-07-02T17:31:00.337029Z",
     "iopub.status.idle": "2024-07-02T17:31:02.082806Z",
     "shell.execute_reply": "2024-07-02T17:31:02.081431Z"
    },
    "papermill": {
     "duration": 1.766226,
     "end_time": "2024-07-02T17:31:02.085654",
     "exception": false,
     "start_time": "2024-07-02T17:31:00.319428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2024-07-02 17:31:01--  https://raw.githubusercontent.com/karpathy/makemore/master/names.txt\r\n",
      "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.109.133, 185.199.108.133, ...\r\n",
      "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\r\n",
      "HTTP request sent, awaiting response... 200 OK\r\n",
      "Length: 228145 (223K) [text/plain]\r\n",
      "Saving to: 'names.txt'\r\n",
      "\r\n",
      "names.txt           100%[===================>] 222.80K  --.-KB/s    in 0.1s    \r\n",
      "\r\n",
      "2024-07-02 17:31:01 (1.86 MB/s) - 'names.txt' saved [228145/228145]\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    words = open(\"names.txt\",\"r\").read().splitlines()\n",
    "except:\n",
    "    !wget https://raw.githubusercontent.com/karpathy/makemore/master/names.txt\n",
    "    words = open(\"names.txt\",\"r\").read().splitlines()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c9e7c36f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:02.119440Z",
     "iopub.status.busy": "2024-07-02T17:31:02.118251Z",
     "iopub.status.idle": "2024-07-02T17:31:02.133489Z",
     "shell.execute_reply": "2024-07-02T17:31:02.132162Z"
    },
    "papermill": {
     "duration": 0.03513,
     "end_time": "2024-07-02T17:31:02.136481",
     "exception": false,
     "start_time": "2024-07-02T17:31:02.101351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "words = open('names.txt', 'r').read().splitlines()\n",
    "words[:8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3c3fb68c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:02.172207Z",
     "iopub.status.busy": "2024-07-02T17:31:02.171783Z",
     "iopub.status.idle": "2024-07-02T17:31:02.179406Z",
     "shell.execute_reply": "2024-07-02T17:31:02.178113Z"
    },
    "papermill": {
     "duration": 0.029049,
     "end_time": "2024-07-02T17:31:02.181890",
     "exception": false,
     "start_time": "2024-07-02T17:31:02.152841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32033"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3e6d67fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:02.222280Z",
     "iopub.status.busy": "2024-07-02T17:31:02.221331Z",
     "iopub.status.idle": "2024-07-02T17:31:02.234546Z",
     "shell.execute_reply": "2024-07-02T17:31:02.233157Z"
    },
    "papermill": {
     "duration": 0.036511,
     "end_time": "2024-07-02T17:31:02.237212",
     "exception": false,
     "start_time": "2024-07-02T17:31:02.200701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}\n"
     ]
    }
   ],
   "source": [
    "# build the vocabulary of characters and mappings to/from integers\n",
    "chars = sorted(list(set(''.join(words))))\n",
    "stoi = {s:i+1 for i,s in enumerate(chars)}\n",
    "stoi['.'] = 0\n",
    "itos = {i:s for s,i in stoi.items()}\n",
    "print(itos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4b987bf7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:02.271235Z",
     "iopub.status.busy": "2024-07-02T17:31:02.270805Z",
     "iopub.status.idle": "2024-07-02T17:31:02.278182Z",
     "shell.execute_reply": "2024-07-02T17:31:02.277027Z"
    },
    "papermill": {
     "duration": 0.027448,
     "end_time": "2024-07-02T17:31:02.280642",
     "exception": false,
     "start_time": "2024-07-02T17:31:02.253194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "emma\n",
      "Features: ... ---> label: e\n",
      "Features: ..e ---> label: m\n",
      "Features: .em ---> label: m\n",
      "Features: emm ---> label: a\n",
      "Features: mma ---> label: .\n",
      "olivia\n",
      "Features: ... ---> label: o\n",
      "Features: ..o ---> label: l\n",
      "Features: .ol ---> label: i\n",
      "Features: oli ---> label: v\n",
      "Features: liv ---> label: i\n",
      "Features: ivi ---> label: a\n",
      "Features: via ---> label: .\n",
      "ava\n",
      "Features: ... ---> label: a\n",
      "Features: ..a ---> label: v\n",
      "Features: .av ---> label: a\n",
      "Features: ava ---> label: .\n"
     ]
    }
   ],
   "source": [
    "#Visualizing how the dataset is going to look like \n",
    "\n",
    "block_size = 3 # context length: how many characters do we take to predict the next one?\n",
    "for w in words[:3]:\n",
    "    print(w)\n",
    "    context = [0] * block_size\n",
    "    for ch in w + '.':\n",
    "        ix = stoi[ch]\n",
    "        print(f\"Features: {''.join(itos[i] for i in context)} ---> label: {itos[ix]}\")\n",
    "        context = context[1:] + [ix] # crop and append"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "50ccfcd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:02.314646Z",
     "iopub.status.busy": "2024-07-02T17:31:02.314242Z",
     "iopub.status.idle": "2024-07-02T17:31:03.138414Z",
     "shell.execute_reply": "2024-07-02T17:31:03.137086Z"
    },
    "papermill": {
     "duration": 0.843801,
     "end_time": "2024-07-02T17:31:03.140812",
     "exception": false,
     "start_time": "2024-07-02T17:31:02.297011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([228146, 3]) torch.Size([228146])\n"
     ]
    }
   ],
   "source": [
    "block_size = 3 # context length: how many characters do we take to predict the next one?\n",
    "X, Y = [], []\n",
    "for w in words:  \n",
    "    context = [0] * block_size\n",
    "    for ch in w + '.':\n",
    "        ix = stoi[ch]\n",
    "        X.append(context)\n",
    "        Y.append(ix)\n",
    "        context = context[1:] + [ix] # crop and append\n",
    "X = torch.tensor(X)\n",
    "Y = torch.tensor(Y)\n",
    "print(X.shape,Y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "30cd41c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:03.175298Z",
     "iopub.status.busy": "2024-07-02T17:31:03.174876Z",
     "iopub.status.idle": "2024-07-02T17:31:03.192210Z",
     "shell.execute_reply": "2024-07-02T17:31:03.190985Z"
    },
    "papermill": {
     "duration": 0.037745,
     "end_time": "2024-07-02T17:31:03.194917",
     "exception": false,
     "start_time": "2024-07-02T17:31:03.157172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "C = torch.randn((27,2)) # This is our embedding look up table"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19bf0bcb",
   "metadata": {
    "papermill": {
     "duration": 0.015779,
     "end_time": "2024-07-02T17:31:03.226769",
     "exception": false,
     "start_time": "2024-07-02T17:31:03.210990",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Indexing the look up table\n",
    "\n",
    "- We can access this embbeding table by indexing into it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "412ad3bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:03.260293Z",
     "iopub.status.busy": "2024-07-02T17:31:03.259882Z",
     "iopub.status.idle": "2024-07-02T17:31:03.356169Z",
     "shell.execute_reply": "2024-07-02T17:31:03.354543Z"
    },
    "papermill": {
     "duration": 0.115882,
     "end_time": "2024-07-02T17:31:03.358550",
     "exception": false,
     "start_time": "2024-07-02T17:31:03.242668",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Single index\n",
      "tensor([ 0.3665, -0.6819])\n",
      "Multiple indexes\n",
      "tensor([[ 0.3665, -0.6819],\n",
      "        [ 0.3665, -0.6819]])\n",
      "Higher demension index\n",
      "tensor([[[ 0.3665, -0.6819],\n",
      "         [ 0.3665, -0.6819],\n",
      "         [ 0.3665, -0.6819]],\n",
      "\n",
      "        [[ 0.3665, -0.6819],\n",
      "         [ 0.3665, -0.6819],\n",
      "         [ 0.3665, -0.6819]]])\n",
      "Indexing with X\n",
      "torch.Size([228146, 3, 2])\n"
     ]
    }
   ],
   "source": [
    "# We can index into the look up table by single index\n",
    "print(\"Single index\")\n",
    "print(C[torch.tensor(0)]) \n",
    "\n",
    "# We can also do multiple indexes and repeated indexes\n",
    "print(\"Multiple indexes\")\n",
    "print(C[torch.tensor([0,0])]) #Notice the input shape is [2] and output shape is [2,2]\n",
    "\n",
    "# We can index with higher dimension indexes as well\n",
    "print(\"Higher demension index\")\n",
    "print(C[torch.zeros(2,3).long()]) #Input shape [2,3], output shape [2,3,2]\n",
    "\n",
    "# We can index from using our X since X is a high dimensional tensor\n",
    "print(\"Indexing with X\")\n",
    "print(C[X].shape) #XOnly print the shape here since"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "80fec135",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:03.392241Z",
     "iopub.status.busy": "2024-07-02T17:31:03.391766Z",
     "iopub.status.idle": "2024-07-02T17:31:03.416580Z",
     "shell.execute_reply": "2024-07-02T17:31:03.415312Z"
    },
    "papermill": {
     "duration": 0.044451,
     "end_time": "2024-07-02T17:31:03.419050",
     "exception": false,
     "start_time": "2024-07-02T17:31:03.374599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([228146, 3, 2])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "torch.Size([228146, 2])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emb = C[X]\n",
    "print(emb.shape) # Number of samples, sequence length, embed dim\n",
    "emb[:,0,:].shape #Embedding dimension of the first letters\n",
    "emb[:,1,:].shape #Embedding dimension of the second letters\n",
    "emb[:,2,:].shape #Embedding dimension of the third letters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "099c64ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:03.452770Z",
     "iopub.status.busy": "2024-07-02T17:31:03.452380Z",
     "iopub.status.idle": "2024-07-02T17:31:03.472404Z",
     "shell.execute_reply": "2024-07-02T17:31:03.471071Z"
    },
    "papermill": {
     "duration": 0.039919,
     "end_time": "2024-07-02T17:31:03.475037",
     "exception": false,
     "start_time": "2024-07-02T17:31:03.435118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([228146, 6])\n",
      "Turning one tensor into 3 tensors\n",
      "torch.Size([228146, 6])\n"
     ]
    }
   ],
   "source": [
    "# We want to the model to use the information from all 3 letters to predict the next letter so we need to concatenate these embedding dimension together\n",
    "print(torch.cat((emb[:,0,:],emb[:,1,:],emb[:,2,:]), dim = 1).shape)\n",
    "\n",
    "# What if we want to change the block size from 3 to some other number ? We can use the unbind function to split the tensor in the dimension we want\n",
    "print(f\"Turning one tensor into {len(torch.unbind(emb, dim = 1))} tensors\")\n",
    "\n",
    "# Now we can concat them together\n",
    "print(torch.cat(torch.unbind(emb, dim = 1), dim = 1).shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d59b5146",
   "metadata": {
    "papermill": {
     "duration": 0.015721,
     "end_time": "2024-07-02T17:31:03.507509",
     "exception": false,
     "start_time": "2024-07-02T17:31:03.491788",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Tensor operation efficiency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d6749f22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:03.541756Z",
     "iopub.status.busy": "2024-07-02T17:31:03.541027Z",
     "iopub.status.idle": "2024-07-02T17:31:03.559682Z",
     "shell.execute_reply": "2024-07-02T17:31:03.558592Z"
    },
    "papermill": {
     "duration": 0.038366,
     "end_time": "2024-07-02T17:31:03.562071",
     "exception": false,
     "start_time": "2024-07-02T17:31:03.523705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# There is another way to archive the same results as unbind and then concat using .view() method\n",
    "torch.equal(emb.view(emb.shape[0], -1),torch.cat(torch.unbind(emb, dim = 1), dim = 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4f1023c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:03.596877Z",
     "iopub.status.busy": "2024-07-02T17:31:03.595925Z",
     "iopub.status.idle": "2024-07-02T17:31:05.517520Z",
     "shell.execute_reply": "2024-07-02T17:31:05.516389Z"
    },
    "papermill": {
     "duration": 1.9416,
     "end_time": "2024-07-02T17:31:05.520036",
     "exception": false,
     "start_time": "2024-07-02T17:31:03.578436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unbind and then concat method:  1.9148 s\n"
     ]
    }
   ],
   "source": [
    "#Let's compared the efficiency between 2 methods\n",
    "import time\n",
    "\n",
    "start = time.time()\n",
    "for _ in range(1000):\n",
    "    torch.cat(torch.unbind(emb,dim = 1), dim = 1)\n",
    "end = time.time()\n",
    "print(f\"Unbind and then concat method: {end - start: .4f} s\")\n",
    "# this is inefficient since new tensors have to be created and then concat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b17a5873",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:05.555504Z",
     "iopub.status.busy": "2024-07-02T17:31:05.554309Z",
     "iopub.status.idle": "2024-07-02T17:31:05.564390Z",
     "shell.execute_reply": "2024-07-02T17:31:05.563178Z"
    },
    "papermill": {
     "duration": 0.031112,
     "end_time": "2024-07-02T17:31:05.567725",
     "exception": false,
     "start_time": "2024-07-02T17:31:05.536613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "View method:  0.0036 s\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "for _ in range(1000):\n",
    "    emb.view(emb.shape[0],-1)\n",
    "end = time.time()\n",
    "print(f\"View method: {end - start: .4f} s\") #About 500 times faster in this example\n",
    "#This is more efficient since there are no new tensors being created"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "799bee67",
   "metadata": {
    "papermill": {
     "duration": 0.016743,
     "end_time": "2024-07-02T17:31:05.601255",
     "exception": false,
     "start_time": "2024-07-02T17:31:05.584512",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Create the weight and bias\n",
    "\n",
    "<p style=\"text-align:center\">\n",
    "  <img src=\"https://production-media.paperswithcode.com/methods/Screen_Shot_2020-05-26_at_2.17.37_PM.png\" width=\"600\"/> \n",
    "</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "836188da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:05.635937Z",
     "iopub.status.busy": "2024-07-02T17:31:05.635508Z",
     "iopub.status.idle": "2024-07-02T17:31:05.641467Z",
     "shell.execute_reply": "2024-07-02T17:31:05.640279Z"
    },
    "papermill": {
     "duration": 0.02649,
     "end_time": "2024-07-02T17:31:05.644179",
     "exception": false,
     "start_time": "2024-07-02T17:31:05.617689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "W1 = torch.randn((6,100)) # The X has the shape of (number of samples, 6) so we want the weight shape to be (6, number of neurons), this number of neuron can be anything\n",
    "b1 = torch.randn(100) #Add bias after multiplying the emb with weight. (Number of samples, 6) @ (6, 100) --> (Number of samples, 100)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1681267d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:05.679186Z",
     "iopub.status.busy": "2024-07-02T17:31:05.678718Z",
     "iopub.status.idle": "2024-07-02T17:31:05.864393Z",
     "shell.execute_reply": "2024-07-02T17:31:05.862849Z"
    },
    "papermill": {
     "duration": 0.206234,
     "end_time": "2024-07-02T17:31:05.866985",
     "exception": false,
     "start_time": "2024-07-02T17:31:05.660751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "h  = F.tanh(emb.view(emb.shape[0],-1)@W1 + b1) #Applying tanh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f92b27c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:05.961232Z",
     "iopub.status.busy": "2024-07-02T17:31:05.960775Z",
     "iopub.status.idle": "2024-07-02T17:31:05.966552Z",
     "shell.execute_reply": "2024-07-02T17:31:05.965438Z"
    },
    "papermill": {
     "duration": 0.085473,
     "end_time": "2024-07-02T17:31:05.969056",
     "exception": false,
     "start_time": "2024-07-02T17:31:05.883583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create the output layer\n",
    "W2 = torch.randn((100,27)) #The output of this layer is the number of posible character we want to predict\n",
    "b2 = torch.randn(27)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ec4a9c4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:06.005061Z",
     "iopub.status.busy": "2024-07-02T17:31:06.004664Z",
     "iopub.status.idle": "2024-07-02T17:31:06.123893Z",
     "shell.execute_reply": "2024-07-02T17:31:06.122574Z"
    },
    "papermill": {
     "duration": 0.140734,
     "end_time": "2024-07-02T17:31:06.126718",
     "exception": false,
     "start_time": "2024-07-02T17:31:05.985984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(17.0928)\n",
      "tensor(17.0928)\n"
     ]
    }
   ],
   "source": [
    "# SImilar to the bigram model\n",
    "logits = h@W2 + b2\n",
    "# The next 3 lines are basically the cross entropy loss. We can use the cross_entropy function in PyTorch and it's much more efficient for the backward pass\n",
    "counts = logits.exp()\n",
    "prob = counts / counts.sum(dim = 1, keepdims = True)\n",
    "loss = -prob[torch.arange(len(Y)),Y].log().mean()\n",
    "print(loss)\n",
    "print(F.cross_entropy(logits,Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1b8758f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:06.162525Z",
     "iopub.status.busy": "2024-07-02T17:31:06.162134Z",
     "iopub.status.idle": "2024-07-02T17:31:06.169719Z",
     "shell.execute_reply": "2024-07-02T17:31:06.168585Z"
    },
    "papermill": {
     "duration": 0.028651,
     "end_time": "2024-07-02T17:31:06.172353",
     "exception": false,
     "start_time": "2024-07-02T17:31:06.143702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([228146, 27])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logits.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f1517427",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:06.208809Z",
     "iopub.status.busy": "2024-07-02T17:31:06.207966Z",
     "iopub.status.idle": "2024-07-02T17:31:06.215106Z",
     "shell.execute_reply": "2024-07-02T17:31:06.213883Z"
    },
    "papermill": {
     "duration": 0.027654,
     "end_time": "2024-07-02T17:31:06.217442",
     "exception": false,
     "start_time": "2024-07-02T17:31:06.189788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([228146])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fc021c81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:06.253113Z",
     "iopub.status.busy": "2024-07-02T17:31:06.252714Z",
     "iopub.status.idle": "2024-07-02T17:31:06.264339Z",
     "shell.execute_reply": "2024-07-02T17:31:06.263055Z"
    },
    "papermill": {
     "duration": 0.032304,
     "end_time": "2024-07-02T17:31:06.266770",
     "exception": false,
     "start_time": "2024-07-02T17:31:06.234466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([3.7835e-44, 4.9787e-02, 1.0000e+00,        inf])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "tensor([-0., -0., -0., nan])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Another reason for using PyTorch module is how it handle the values inside the logits\n",
    "logits = torch.tensor([-100,-3,0,100])\n",
    "counts = logits.exp() #This exponential term make the counts overflow\n",
    "print(counts) #Notice the inf\n",
    "probs = -counts/counts.sum()\n",
    "probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d51aae49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:06.303349Z",
     "iopub.status.busy": "2024-07-02T17:31:06.302938Z",
     "iopub.status.idle": "2024-07-02T17:31:06.313263Z",
     "shell.execute_reply": "2024-07-02T17:31:06.311813Z"
    },
    "papermill": {
     "duration": 0.031365,
     "end_time": "2024-07-02T17:31:06.315671",
     "exception": false,
     "start_time": "2024-07-02T17:31:06.284306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([-4.9824e-01, -1.6714e-04, -3.3571e-03, -4.9824e-01])\n",
      "tensor([-4.9824e-01, -1.6714e-04, -3.3571e-03, -4.9824e-01])\n",
      "tensor([-4.9824e-01, -1.6714e-04, -3.3571e-03, -4.9824e-01])\n",
      "tensor([-4.9824e-01, -1.6714e-04, -3.3571e-03, -4.9824e-01])\n",
      "tensor([-4.9824e-01, -1.6714e-04, -3.3571e-03, -4.9824e-01])\n"
     ]
    }
   ],
   "source": [
    "#There's another \"property\" of the cross_entropy is that we can offset the logits and get the same\n",
    "for i in range(5):\n",
    "    logits = torch.tensor([5,-3,0,5]) - i\n",
    "    counts = logits.exp()\n",
    "    probs = -counts/counts.sum()\n",
    "    print(probs)\n",
    "\n",
    "# PyTorch implementation would subtract the highest value from the logits and we prevent the overflow"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ce5e0c5",
   "metadata": {
    "papermill": {
     "duration": 0.017081,
     "end_time": "2024-07-02T17:31:06.350633",
     "exception": false,
     "start_time": "2024-07-02T17:31:06.333552",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Made everything more readable and overfit a small portion of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d69a6568",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:06.386972Z",
     "iopub.status.busy": "2024-07-02T17:31:06.386589Z",
     "iopub.status.idle": "2024-07-02T17:31:06.825444Z",
     "shell.execute_reply": "2024-07-02T17:31:06.824175Z"
    },
    "papermill": {
     "duration": 0.460055,
     "end_time": "2024-07-02T17:31:06.827863",
     "exception": false,
     "start_time": "2024-07-02T17:31:06.367808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([32, 3]) torch.Size([32])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(torch.Size([32, 3]), torch.Size([32]))"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "block_size = 3 # context length: how many characters do we take to predict the next one?\n",
    "X, Y = [], []\n",
    "for w in words:  \n",
    "    context = [0] * block_size\n",
    "    for ch in w + '.':\n",
    "        ix = stoi[ch]\n",
    "        X.append(context)\n",
    "        Y.append(ix)\n",
    "        context = context[1:] + [ix] # crop and append\n",
    "X = torch.tensor(X[:32])\n",
    "Y = torch.tensor(Y[:32])\n",
    "print(X.shape,Y.shape)\n",
    "X.shape, Y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f569a76a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:06.871781Z",
     "iopub.status.busy": "2024-07-02T17:31:06.871390Z",
     "iopub.status.idle": "2024-07-02T17:31:06.884245Z",
     "shell.execute_reply": "2024-07-02T17:31:06.882852Z"
    },
    "papermill": {
     "duration": 0.043937,
     "end_time": "2024-07-02T17:31:06.889238",
     "exception": false,
     "start_time": "2024-07-02T17:31:06.845301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of parameters in total is 3481\n"
     ]
    }
   ],
   "source": [
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C = torch.randn((27, 2), generator=g)\n",
    "W1 = torch.randn((6, 100), generator=g)\n",
    "b1 = torch.randn(100, generator=g)\n",
    "W2 = torch.randn((100, 27), generator=g)\n",
    "b2 = torch.randn(27, generator=g)\n",
    "parameters = [C, W1, b1, W2, b2]\n",
    "print(f\"The number of parameters in total is {sum(p.numel() for p in parameters)}\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cb45e3d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:06.939070Z",
     "iopub.status.busy": "2024-07-02T17:31:06.938692Z",
     "iopub.status.idle": "2024-07-02T17:31:06.945523Z",
     "shell.execute_reply": "2024-07-02T17:31:06.944062Z"
    },
    "papermill": {
     "duration": 0.031227,
     "end_time": "2024-07-02T17:31:06.948069",
     "exception": false,
     "start_time": "2024-07-02T17:31:06.916842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "#The parameters are not tracking the gradient at the moment so we have to set requires_grad = True\n",
    "print(parameters[0].requires_grad) # Example\n",
    "\n",
    "for p in parameters:\n",
    "    p.requires_grad = True\n",
    "    \n",
    "print(parameters[0].requires_grad)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b9a692c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:06.986155Z",
     "iopub.status.busy": "2024-07-02T17:31:06.985631Z",
     "iopub.status.idle": "2024-07-02T17:31:07.467939Z",
     "shell.execute_reply": "2024-07-02T17:31:07.464892Z"
    },
    "papermill": {
     "duration": 0.505418,
     "end_time": "2024-07-02T17:31:07.471456",
     "exception": false,
     "start_time": "2024-07-02T17:31:06.966038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2561509907245636\n"
     ]
    }
   ],
   "source": [
    "for _ in range(1000):\n",
    "    # Forward Pass\n",
    "    emb = C[X]\n",
    "    h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "    logits = h@W2 + b2\n",
    "    loss = F.cross_entropy(logits, Y)\n",
    "    # Backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "\n",
    "    # Update the weight\n",
    "    for p in parameters:\n",
    "        p.data += -0.1*p.grad\n",
    "print(loss.item())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7252e06",
   "metadata": {
    "papermill": {
     "duration": 0.017767,
     "end_time": "2024-07-02T17:31:07.513292",
     "exception": false,
     "start_time": "2024-07-02T17:31:07.495525",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Let's train with minibatches\n",
    "- The whole dataset has over 200000 samples and it would take a long time to do forward pass and backward pass. In practice we want to do the minibatches\n",
    "- We compromise the gradient direction for some speed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "951c933a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:07.551646Z",
     "iopub.status.busy": "2024-07-02T17:31:07.551114Z",
     "iopub.status.idle": "2024-07-02T17:31:08.248662Z",
     "shell.execute_reply": "2024-07-02T17:31:08.247456Z"
    },
    "papermill": {
     "duration": 0.719925,
     "end_time": "2024-07-02T17:31:08.251225",
     "exception": false,
     "start_time": "2024-07-02T17:31:07.531300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([228146, 3]) torch.Size([228146])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(torch.Size([228146, 3]), torch.Size([228146]))"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "block_size = 3 # context length: how many characters do we take to predict the next one?\n",
    "X, Y = [], []\n",
    "for w in words:  \n",
    "    context = [0] * block_size\n",
    "    for ch in w + '.':\n",
    "        ix = stoi[ch]\n",
    "        X.append(context)\n",
    "        Y.append(ix)\n",
    "        context = context[1:] + [ix] # crop and append\n",
    "X = torch.tensor(X)\n",
    "Y = torch.tensor(Y)\n",
    "print(X.shape,Y.shape)\n",
    "X.shape, Y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "79d7ccf1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:08.289118Z",
     "iopub.status.busy": "2024-07-02T17:31:08.288666Z",
     "iopub.status.idle": "2024-07-02T17:31:08.298105Z",
     "shell.execute_reply": "2024-07-02T17:31:08.296557Z"
    },
    "papermill": {
     "duration": 0.031747,
     "end_time": "2024-07-02T17:31:08.301027",
     "exception": false,
     "start_time": "2024-07-02T17:31:08.269280",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of parameters in total is 3481\n",
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C = torch.randn((27, 2), generator=g)\n",
    "W1 = torch.randn((6, 100), generator=g)\n",
    "b1 = torch.randn(100, generator=g)\n",
    "W2 = torch.randn((100, 27), generator=g)\n",
    "b2 = torch.randn(27, generator=g)\n",
    "parameters = [C, W1, b1, W2, b2]\n",
    "print(f\"The number of parameters in total is {sum(p.numel() for p in parameters)}\") \n",
    "\n",
    "#The parameters are not tracking the gradient at the moment so we have to set requires_grad = True\n",
    "print(parameters[0].requires_grad) # Example\n",
    "\n",
    "for p in parameters:\n",
    "    p.requires_grad = True\n",
    "    \n",
    "print(parameters[0].requires_grad)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "72aa0ada",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:08.341797Z",
     "iopub.status.busy": "2024-07-02T17:31:08.341419Z",
     "iopub.status.idle": "2024-07-02T17:31:08.791816Z",
     "shell.execute_reply": "2024-07-02T17:31:08.790781Z"
    },
    "papermill": {
     "duration": 0.473891,
     "end_time": "2024-07-02T17:31:08.794583",
     "exception": false,
     "start_time": "2024-07-02T17:31:08.320692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19.875137329101562\n",
      "4.533324718475342\n",
      "3.095306158065796\n",
      "2.926532030105591\n",
      "2.9921863079071045\n",
      "3.1981348991394043\n",
      "2.7794435024261475\n",
      "2.907750129699707\n",
      "2.8444581031799316\n",
      "2.6388304233551025\n"
     ]
    }
   ],
   "source": [
    "for i in range(1000):\n",
    "    # Create a random minibatch from our dataset\n",
    "    ix = torch.randint(0,X.shape[0],(32,)) # 32 random indexes \n",
    "    # Forward Pass\n",
    "    emb = C[X[ix]] #Only take the 32 samples\n",
    "    h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "    logits = h@W2 + b2\n",
    "    loss = F.cross_entropy(logits, Y[ix]) # Need to do the same of Y, take the 32 samples at the same indexes\n",
    "    # Backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "\n",
    "    # Update the weight\n",
    "    for p in parameters:\n",
    "        p.data += -0.1*p.grad\n",
    "    if i % 100 == 0:\n",
    "        print(loss.item())\n",
    "\n",
    "# Note this is the loss on the batch not on the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "37749b78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:08.833587Z",
     "iopub.status.busy": "2024-07-02T17:31:08.833154Z",
     "iopub.status.idle": "2024-07-02T17:31:09.055632Z",
     "shell.execute_reply": "2024-07-02T17:31:09.054364Z"
    },
    "papermill": {
     "duration": 0.245248,
     "end_time": "2024-07-02T17:31:09.058314",
     "exception": false,
     "start_time": "2024-07-02T17:31:08.813066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(2.7227, grad_fn=<NllLossBackward0>)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emb = C[X] #Only take the 32 samples\n",
    "h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "logits = h@W2 + b2\n",
    "loss = F.cross_entropy(logits, Y) # Need to do the same of Y, take the 32 samples at the same indexes\n",
    "loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2412ea12",
   "metadata": {
    "papermill": {
     "duration": 0.02022,
     "end_time": "2024-07-02T17:31:09.097561",
     "exception": false,
     "start_time": "2024-07-02T17:31:09.077341",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# How can we find a good learning rate ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "60bfde5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:09.137579Z",
     "iopub.status.busy": "2024-07-02T17:31:09.136984Z",
     "iopub.status.idle": "2024-07-02T17:31:09.146416Z",
     "shell.execute_reply": "2024-07-02T17:31:09.145181Z"
    },
    "papermill": {
     "duration": 0.032506,
     "end_time": "2024-07-02T17:31:09.148697",
     "exception": false,
     "start_time": "2024-07-02T17:31:09.116191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of parameters in total is 3481\n",
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C = torch.randn((27, 2), generator=g)\n",
    "W1 = torch.randn((6, 100), generator=g)\n",
    "b1 = torch.randn(100, generator=g)\n",
    "W2 = torch.randn((100, 27), generator=g)\n",
    "b2 = torch.randn(27, generator=g)\n",
    "parameters = [C, W1, b1, W2, b2]\n",
    "print(f\"The number of parameters in total is {sum(p.numel() for p in parameters)}\") \n",
    "\n",
    "#The parameters are not tracking the gradient at the moment so we have to set requires_grad = True\n",
    "print(parameters[0].requires_grad) # Example\n",
    "\n",
    "for p in parameters:\n",
    "    p.requires_grad = True\n",
    "    \n",
    "print(parameters[0].requires_grad)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "460edf6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:09.188882Z",
     "iopub.status.busy": "2024-07-02T17:31:09.188496Z",
     "iopub.status.idle": "2024-07-02T17:31:09.193790Z",
     "shell.execute_reply": "2024-07-02T17:31:09.192635Z"
    },
    "papermill": {
     "duration": 0.028278,
     "end_time": "2024-07-02T17:31:09.196259",
     "exception": false,
     "start_time": "2024-07-02T17:31:09.167981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lre = torch.linspace(-4,0,1000)\n",
    "lrs = 10**lre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ad6750c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:09.236280Z",
     "iopub.status.busy": "2024-07-02T17:31:09.235407Z",
     "iopub.status.idle": "2024-07-02T17:31:09.680388Z",
     "shell.execute_reply": "2024-07-02T17:31:09.679391Z"
    },
    "papermill": {
     "duration": 0.467473,
     "end_time": "2024-07-02T17:31:09.683194",
     "exception": false,
     "start_time": "2024-07-02T17:31:09.215721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lri = []\n",
    "lossi = []\n",
    "for i in range(1000):\n",
    "    # Create a random minibatch from our dataset\n",
    "    ix = torch.randint(0,X.shape[0],(32,)) # 32 random indexes \n",
    "    # Forward Pass\n",
    "    emb = C[X[ix]] #Only take the 32 samples\n",
    "    h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "    logits = h@W2 + b2\n",
    "    loss = F.cross_entropy(logits, Y[ix]) # Need to do the same of Y, take the 32 samples at the same indexes\n",
    "    # Backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    \n",
    "    lr = lrs[i]\n",
    "    # Update the weight\n",
    "    for p in parameters:\n",
    "        p.data += -lr*p.grad\n",
    "    \n",
    "    # Track stats\n",
    "    lri.append(lre[i])\n",
    "    lossi.append(loss.item())\n",
    "    \n",
    "\n",
    "# Note this is the loss on the batch not on the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "2aff9037",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:09.724152Z",
     "iopub.status.busy": "2024-07-02T17:31:09.723701Z",
     "iopub.status.idle": "2024-07-02T17:31:10.024793Z",
     "shell.execute_reply": "2024-07-02T17:31:10.023604Z"
    },
    "papermill": {
     "duration": 0.324351,
     "end_time": "2024-07-02T17:31:10.027518",
     "exception": false,
     "start_time": "2024-07-02T17:31:09.703167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7a939154fa00>]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(lri,lossi) # The learning rate exponential is good around -1 to -0.5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "367e93c9",
   "metadata": {
    "papermill": {
     "duration": 0.018824,
     "end_time": "2024-07-02T17:31:10.065454",
     "exception": false,
     "start_time": "2024-07-02T17:31:10.046630",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5f8654a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:10.108549Z",
     "iopub.status.busy": "2024-07-02T17:31:10.108108Z",
     "iopub.status.idle": "2024-07-02T17:31:10.118453Z",
     "shell.execute_reply": "2024-07-02T17:31:10.116993Z"
    },
    "papermill": {
     "duration": 0.035642,
     "end_time": "2024-07-02T17:31:10.121015",
     "exception": false,
     "start_time": "2024-07-02T17:31:10.085373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of parameters in total is 3481\n",
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C = torch.randn((27, 2), generator=g)\n",
    "W1 = torch.randn((6, 100), generator=g)\n",
    "b1 = torch.randn(100, generator=g)\n",
    "W2 = torch.randn((100, 27), generator=g)\n",
    "b2 = torch.randn(27, generator=g)\n",
    "parameters = [C, W1, b1, W2, b2]\n",
    "print(f\"The number of parameters in total is {sum(p.numel() for p in parameters)}\") \n",
    "\n",
    "#The parameters are not tracking the gradient at the moment so we have to set requires_grad = True\n",
    "print(parameters[0].requires_grad) # Example\n",
    "\n",
    "for p in parameters:\n",
    "    p.requires_grad = True\n",
    "    \n",
    "print(parameters[0].requires_grad)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ecd7b658",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:10.161841Z",
     "iopub.status.busy": "2024-07-02T17:31:10.161393Z",
     "iopub.status.idle": "2024-07-02T17:31:14.719305Z",
     "shell.execute_reply": "2024-07-02T17:31:14.718037Z"
    },
    "papermill": {
     "duration": 4.581296,
     "end_time": "2024-07-02T17:31:14.722117",
     "exception": false,
     "start_time": "2024-07-02T17:31:10.140821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.4679410457611084\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for i in range(10000):\n",
    "    # Create a random minibatch from our dataset\n",
    "    ix = torch.randint(0,X.shape[0],(32,)) # 32 random indexes \n",
    "    # Forward Pass\n",
    "    emb = C[X[ix]] #Only take the 32 samples\n",
    "    h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "    logits = h@W2 + b2\n",
    "    loss = F.cross_entropy(logits, Y[ix]) # Need to do the same of Y, take the 32 samples at the same indexes\n",
    "    # Backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    \n",
    "    lr = 0.1\n",
    "    # Update the weight\n",
    "    for p in parameters:\n",
    "        p.data += -lr*p.grad\n",
    "\n",
    "emb = C[X]\n",
    "h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "logits = h@W2 + b2\n",
    "loss = F.cross_entropy(logits, Y)\n",
    "print(loss.item())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89ba2c81",
   "metadata": {
    "papermill": {
     "duration": 0.018848,
     "end_time": "2024-07-02T17:31:14.760124",
     "exception": false,
     "start_time": "2024-07-02T17:31:14.741276",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Split the training data into train, val and test set\n",
    "- We do not want the model to memorize the data so we need to split the data into train set, val set (dev set), test test. Typically in 80%-10%-10% split respectively\n",
    "    - Train set: optimize the paramerters of the model\n",
    "    - Val set (Dev set): optimize the hyperparameters of the model\n",
    "    - Test set: the model performance (Only use this very sparingly) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3b53f279",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:14.801050Z",
     "iopub.status.busy": "2024-07-02T17:31:14.800638Z",
     "iopub.status.idle": "2024-07-02T17:31:15.475667Z",
     "shell.execute_reply": "2024-07-02T17:31:15.474208Z"
    },
    "papermill": {
     "duration": 0.699086,
     "end_time": "2024-07-02T17:31:15.478238",
     "exception": false,
     "start_time": "2024-07-02T17:31:14.779152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([182625, 3]) torch.Size([182625])\n",
      "torch.Size([22655, 3]) torch.Size([22655])\n",
      "torch.Size([22866, 3]) torch.Size([22866])\n"
     ]
    }
   ],
   "source": [
    "# build the dataset\n",
    "block_size = 3 # context length: how many characters do we take to predict the next one?\n",
    "\n",
    "def build_dataset(words):  \n",
    "    X, Y = [], []\n",
    "    for w in words:\n",
    "\n",
    "        #print(w)\n",
    "        context = [0] * block_size\n",
    "        for ch in w + '.':\n",
    "            ix = stoi[ch]\n",
    "            X.append(context)\n",
    "            Y.append(ix)\n",
    "            #print(''.join(itos[i] for i in context), '--->', itos[ix])\n",
    "            context = context[1:] + [ix] # crop and append\n",
    "\n",
    "    X = torch.tensor(X)\n",
    "    Y = torch.tensor(Y)\n",
    "    print(X.shape, Y.shape)\n",
    "    return X, Y\n",
    "\n",
    "import random\n",
    "random.seed(42)\n",
    "random.shuffle(words)\n",
    "n1 = int(0.8*len(words))\n",
    "n2 = int(0.9*len(words)) \n",
    "\n",
    "Xtr, Ytr = build_dataset(words[:n1]) #80% of sample\n",
    "Xdev, Ydev = build_dataset(words[n1:n2]) # 10% of sample\n",
    "Xte, Yte = build_dataset(words[n2:]) # 10% os sample "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e803f306",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:15.518503Z",
     "iopub.status.busy": "2024-07-02T17:31:15.518072Z",
     "iopub.status.idle": "2024-07-02T17:31:15.527188Z",
     "shell.execute_reply": "2024-07-02T17:31:15.525920Z"
    },
    "papermill": {
     "duration": 0.032276,
     "end_time": "2024-07-02T17:31:15.529734",
     "exception": false,
     "start_time": "2024-07-02T17:31:15.497458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of parameters in total is 3481\n"
     ]
    }
   ],
   "source": [
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C = torch.randn((27, 2), generator=g)\n",
    "W1 = torch.randn((6, 100), generator=g)\n",
    "b1 = torch.randn(100, generator=g)\n",
    "W2 = torch.randn((100, 27), generator=g)\n",
    "b2 = torch.randn(27, generator=g)\n",
    "parameters = [C, W1, b1, W2, b2]\n",
    "print(f\"The number of parameters in total is {sum(p.numel() for p in parameters)}\") \n",
    "\n",
    "#The parameters are not tracking the gradient at the moment so we have to set requires_grad = True\n",
    "for p in parameters:\n",
    "    p.requires_grad = True    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "9f048196",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:15.570462Z",
     "iopub.status.busy": "2024-07-02T17:31:15.570024Z",
     "iopub.status.idle": "2024-07-02T17:31:20.088642Z",
     "shell.execute_reply": "2024-07-02T17:31:20.087180Z"
    },
    "papermill": {
     "duration": 4.541961,
     "end_time": "2024-07-02T17:31:20.091291",
     "exception": false,
     "start_time": "2024-07-02T17:31:15.549330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set loss: 2.5186617374420166\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for i in range(10000):\n",
    "    # Create a random minibatch from our dataset\n",
    "    ix = torch.randint(0,Xtr.shape[0],(32,)) # 32 random indexes \n",
    "    # Forward Pass\n",
    "    emb = C[Xtr[ix]] #Only take the 32 samples\n",
    "    h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "    logits = h@W2 + b2\n",
    "    loss = F.cross_entropy(logits, Ytr[ix]) # Need to do the same of Y, take the 32 samples at the same indexes\n",
    "    # Backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    \n",
    "    lr = 0.1\n",
    "    # Update the weight\n",
    "    for p in parameters:\n",
    "        p.data += -lr*p.grad\n",
    "        \n",
    "emb = C[Xtr]\n",
    "h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "logits = h@W2 + b2\n",
    "loss = F.cross_entropy(logits, Ytr)\n",
    "print(f\"Train set loss: {loss.item()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "0d4773d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:20.135206Z",
     "iopub.status.busy": "2024-07-02T17:31:20.134779Z",
     "iopub.status.idle": "2024-07-02T17:31:20.157625Z",
     "shell.execute_reply": "2024-07-02T17:31:20.156369Z"
    },
    "papermill": {
     "duration": 0.048996,
     "end_time": "2024-07-02T17:31:20.160232",
     "exception": false,
     "start_time": "2024-07-02T17:31:20.111236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dev set loss: 2.5126683712005615\n"
     ]
    }
   ],
   "source": [
    "emb = C[Xdev]\n",
    "h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "logits = h@W2 + b2\n",
    "loss = F.cross_entropy(logits, Ydev)\n",
    "print(f\"Dev set loss: {loss.item()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18ac792a",
   "metadata": {
    "papermill": {
     "duration": 0.020298,
     "end_time": "2024-07-02T17:31:20.201562",
     "exception": false,
     "start_time": "2024-07-02T17:31:20.181264",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Scale up the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f27995cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:20.243081Z",
     "iopub.status.busy": "2024-07-02T17:31:20.242636Z",
     "iopub.status.idle": "2024-07-02T17:31:20.251988Z",
     "shell.execute_reply": "2024-07-02T17:31:20.250828Z"
    },
    "papermill": {
     "duration": 0.032981,
     "end_time": "2024-07-02T17:31:20.254403",
     "exception": false,
     "start_time": "2024-07-02T17:31:20.221422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of parameters in total is 10281\n"
     ]
    }
   ],
   "source": [
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C = torch.randn((27, 2), generator=g)\n",
    "W1 = torch.randn((6, 300), generator=g) #Increase to 300 neurons\n",
    "b1 = torch.randn(300, generator=g) #Increase to 300\n",
    "W2 = torch.randn((300, 27), generator=g) #Increase to 300\n",
    "b2 = torch.randn(27, generator=g)\n",
    "parameters = [C, W1, b1, W2, b2]\n",
    "print(f\"The number of parameters in total is {sum(p.numel() for p in parameters)}\") \n",
    "\n",
    "#The parameters are not tracking the gradient at the moment so we have to set requires_grad = True\n",
    "for p in parameters:\n",
    "    p.requires_grad = True    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "114a4f7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:20.296493Z",
     "iopub.status.busy": "2024-07-02T17:31:20.296060Z",
     "iopub.status.idle": "2024-07-02T17:31:20.409415Z",
     "shell.execute_reply": "2024-07-02T17:31:20.408173Z"
    },
    "papermill": {
     "duration": 0.13765,
     "end_time": "2024-07-02T17:31:20.412415",
     "exception": false,
     "start_time": "2024-07-02T17:31:20.274765",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tqdm.auto import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "11546486",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:20.453469Z",
     "iopub.status.busy": "2024-07-02T17:31:20.453037Z",
     "iopub.status.idle": "2024-07-02T17:31:53.346611Z",
     "shell.execute_reply": "2024-07-02T17:31:53.345191Z"
    },
    "papermill": {
     "duration": 32.917159,
     "end_time": "2024-07-02T17:31:53.349215",
     "exception": false,
     "start_time": "2024-07-02T17:31:20.432056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3c641907f3a44e048d53a5ea9782879c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/60000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lossi = []\n",
    "stepi = []\n",
    "for i in tqdm(range(60000)):\n",
    "    # Create a random minibatch from our dataset\n",
    "    ix = torch.randint(0,Xtr.shape[0],(32,)) # 32 random indexes \n",
    "    # Forward Pass\n",
    "    emb = C[Xtr[ix]] #Only take the 32 samples\n",
    "    h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "    logits = h@W2 + b2\n",
    "    loss = F.cross_entropy(logits, Ytr[ix]) # Need to do the same of Y, take the 32 samples at the same indexes\n",
    "    # Backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    if i < 30000:\n",
    "        lr = 0.1\n",
    "    else:\n",
    "        lr = 0.01\n",
    "    # Update the weight\n",
    "    for p in parameters:\n",
    "        p.data += -lr*p.grad\n",
    "    \n",
    "    stepi.append(i)\n",
    "    lossi.append(loss.item())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "56e9d021",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:53.392736Z",
     "iopub.status.busy": "2024-07-02T17:31:53.392322Z",
     "iopub.status.idle": "2024-07-02T17:31:53.661837Z",
     "shell.execute_reply": "2024-07-02T17:31:53.660714Z"
    },
    "papermill": {
     "duration": 0.294211,
     "end_time": "2024-07-02T17:31:53.664532",
     "exception": false,
     "start_time": "2024-07-02T17:31:53.370321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7a93915e7520>]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(stepi,lossi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "67bf62f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:53.707296Z",
     "iopub.status.busy": "2024-07-02T17:31:53.706835Z",
     "iopub.status.idle": "2024-07-02T17:31:54.140065Z",
     "shell.execute_reply": "2024-07-02T17:31:54.138519Z"
    },
    "papermill": {
     "duration": 0.457444,
     "end_time": "2024-07-02T17:31:54.142529",
     "exception": false,
     "start_time": "2024-07-02T17:31:53.685085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set loss: 2.3046443462371826\n"
     ]
    }
   ],
   "source": [
    "emb = C[Xtr]\n",
    "h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "logits = h@W2 + b2\n",
    "loss = F.cross_entropy(logits, Ytr)\n",
    "print(f\"Train set loss: {loss.item()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "7b82223f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:54.184781Z",
     "iopub.status.busy": "2024-07-02T17:31:54.184372Z",
     "iopub.status.idle": "2024-07-02T17:31:54.252711Z",
     "shell.execute_reply": "2024-07-02T17:31:54.251334Z"
    },
    "papermill": {
     "duration": 0.091905,
     "end_time": "2024-07-02T17:31:54.255042",
     "exception": false,
     "start_time": "2024-07-02T17:31:54.163137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dev set loss: 2.3017091751098633\n"
     ]
    }
   ],
   "source": [
    "emb = C[Xdev]\n",
    "h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "logits = h@W2 + b2\n",
    "loss = F.cross_entropy(logits, Ydev)\n",
    "print(f\"Dev set loss: {loss.item()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b69dc467",
   "metadata": {
    "papermill": {
     "duration": 0.019997,
     "end_time": "2024-07-02T17:31:54.298197",
     "exception": false,
     "start_time": "2024-07-02T17:31:54.278200",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Improving the model\n",
    "- The embedding dim could be a bottle neck for this model - we have 27 scharacters and be represented by only 2 dimensional vectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "6dfcb71a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:54.341667Z",
     "iopub.status.busy": "2024-07-02T17:31:54.341255Z",
     "iopub.status.idle": "2024-07-02T17:31:54.672360Z",
     "shell.execute_reply": "2024-07-02T17:31:54.671209Z"
    },
    "papermill": {
     "duration": 0.35643,
     "end_time": "2024-07-02T17:31:54.675015",
     "exception": false,
     "start_time": "2024-07-02T17:31:54.318585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,8))\n",
    "plt.scatter(C[:,0].data, C[:,1].data, s=200)\n",
    "for i in range(C.shape[0]):\n",
    "    plt.text(C[i,0].item(), C[i,1].item(), itos[i], ha=\"center\", va=\"center\", color='white')\n",
    "plt.grid('minor')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "7d0ceda2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:54.721271Z",
     "iopub.status.busy": "2024-07-02T17:31:54.720792Z",
     "iopub.status.idle": "2024-07-02T17:31:54.732202Z",
     "shell.execute_reply": "2024-07-02T17:31:54.730790Z"
    },
    "papermill": {
     "duration": 0.03739,
     "end_time": "2024-07-02T17:31:54.735217",
     "exception": false,
     "start_time": "2024-07-02T17:31:54.697827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of parameters in total is 11897\n"
     ]
    }
   ],
   "source": [
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C = torch.randn((27, 10), generator=g) #Increase to 10 dimensionsal embedding\n",
    "W1 = torch.randn((30, 200), generator=g) # Input shape = 10 embed dimension with blocksize 3 with 200 neurons\n",
    "b1 = torch.randn(200, generator=g) \n",
    "W2 = torch.randn((200, 27), generator=g)\n",
    "b2 = torch.randn(27, generator=g)\n",
    "parameters = [C, W1, b1, W2, b2]\n",
    "print(f\"The number of parameters in total is {sum(p.numel() for p in parameters)}\") \n",
    "\n",
    "#The parameters are not tracking the gradient at the moment so we have to set requires_grad = True\n",
    "for p in parameters:\n",
    "    p.requires_grad = True    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "26d0865a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:54.779825Z",
     "iopub.status.busy": "2024-07-02T17:31:54.779371Z",
     "iopub.status.idle": "2024-07-02T17:31:54.787126Z",
     "shell.execute_reply": "2024-07-02T17:31:54.785533Z"
    },
    "papermill": {
     "duration": 0.033521,
     "end_time": "2024-07-02T17:31:54.790555",
     "exception": false,
     "start_time": "2024-07-02T17:31:54.757034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lossi = []\n",
    "stepi = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "fd0b277d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:31:54.837555Z",
     "iopub.status.busy": "2024-07-02T17:31:54.836236Z",
     "iopub.status.idle": "2024-07-02T17:33:42.215841Z",
     "shell.execute_reply": "2024-07-02T17:33:42.214447Z"
    },
    "papermill": {
     "duration": 107.407493,
     "end_time": "2024-07-02T17:33:42.219190",
     "exception": false,
     "start_time": "2024-07-02T17:31:54.811697",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d44c2b8a57924df8a72546a4d9f85727",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/200000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "epochs = 200000\n",
    "for i in tqdm(range(epochs)):\n",
    "    # Create a random minibatch from our dataset\n",
    "    ix = torch.randint(0,Xtr.shape[0],(32,)) # 32 random indexes \n",
    "    # Forward Pass\n",
    "    emb = C[Xtr[ix]] #Only take the 32 samples\n",
    "    h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "    logits = h@W2 + b2\n",
    "    loss = F.cross_entropy(logits, Ytr[ix]) # Need to do the same of Y, take the 32 samples at the same indexes\n",
    "    # Backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    lr = 0.1 if  i < epochs // 2 else 0.01\n",
    "\n",
    "    # Update the weight\n",
    "    for p in parameters:\n",
    "        p.data += -lr*p.grad\n",
    "    \n",
    "    stepi.append(i)\n",
    "    lossi.append(loss.log10().item())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "eb6dade9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:33:42.267773Z",
     "iopub.status.busy": "2024-07-02T17:33:42.267334Z",
     "iopub.status.idle": "2024-07-02T17:33:42.807551Z",
     "shell.execute_reply": "2024-07-02T17:33:42.805619Z"
    },
    "papermill": {
     "duration": 0.569964,
     "end_time": "2024-07-02T17:33:42.811509",
     "exception": false,
     "start_time": "2024-07-02T17:33:42.241545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7a938dc49630>]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(stepi,lossi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "51585913",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:33:42.864108Z",
     "iopub.status.busy": "2024-07-02T17:33:42.863639Z",
     "iopub.status.idle": "2024-07-02T17:33:43.214628Z",
     "shell.execute_reply": "2024-07-02T17:33:43.213341Z"
    },
    "papermill": {
     "duration": 0.380857,
     "end_time": "2024-07-02T17:33:43.217546",
     "exception": false,
     "start_time": "2024-07-02T17:33:42.836689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set loss: 2.1171915531158447\n"
     ]
    }
   ],
   "source": [
    "emb = C[Xtr]\n",
    "h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "logits = h@W2 + b2\n",
    "loss = F.cross_entropy(logits, Ytr)\n",
    "print(f\"Train set loss: {loss.item()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "e6bb4fc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:33:43.267703Z",
     "iopub.status.busy": "2024-07-02T17:33:43.267140Z",
     "iopub.status.idle": "2024-07-02T17:33:43.325054Z",
     "shell.execute_reply": "2024-07-02T17:33:43.323023Z"
    },
    "papermill": {
     "duration": 0.088483,
     "end_time": "2024-07-02T17:33:43.328460",
     "exception": false,
     "start_time": "2024-07-02T17:33:43.239977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dev set loss: 2.1579365730285645\n"
     ]
    }
   ],
   "source": [
    "emb = C[Xdev]\n",
    "h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "logits = h@W2 + b2\n",
    "loss = F.cross_entropy(logits, Ydev)\n",
    "print(f\"Dev set loss: {loss.item()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9072c25a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:33:43.375822Z",
     "iopub.status.busy": "2024-07-02T17:33:43.375366Z",
     "iopub.status.idle": "2024-07-02T17:33:43.420570Z",
     "shell.execute_reply": "2024-07-02T17:33:43.419202Z"
    },
    "papermill": {
     "duration": 0.072878,
     "end_time": "2024-07-02T17:33:43.423292",
     "exception": false,
     "start_time": "2024-07-02T17:33:43.350414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mora.\n",
      "mayah.\n",
      "see.\n",
      "madhayla.\n",
      "rethruthad.\n",
      "leg.\n",
      "adelyn.\n",
      "elin.\n",
      "shi.\n",
      "jen.\n",
      "eden.\n",
      "estanar.\n",
      "elleimalara.\n",
      "noshubergihiriel.\n",
      "kinde.\n",
      "jenionnie.\n",
      "cason.\n",
      "macdariyah.\n",
      "fael.\n",
      "yuma.\n"
     ]
    }
   ],
   "source": [
    "# sample from the model\n",
    "g = torch.Generator().manual_seed(2147483647 + 10)\n",
    "\n",
    "for _ in range(20):\n",
    "    \n",
    "    out = []\n",
    "    context = [0] * block_size # initialize with all ...\n",
    "    while True:\n",
    "        emb = C[torch.tensor([context])] # (1,block_size,d)\n",
    "        h = torch.tanh(emb.view(1, -1) @ W1 + b1)\n",
    "        logits = h @ W2 + b2\n",
    "        probs = F.softmax(logits, dim=1)\n",
    "        ix = torch.multinomial(probs, num_samples=1, generator=g).item()\n",
    "        context = context[1:] + [ix]\n",
    "        out.append(ix)\n",
    "        if ix == 0:\n",
    "            break\n",
    "    \n",
    "    print(''.join(itos[i] for i in out))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d18205b",
   "metadata": {
    "papermill": {
     "duration": 0.022842,
     "end_time": "2024-07-02T17:33:43.468153",
     "exception": false,
     "start_time": "2024-07-02T17:33:43.445311",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Beating Anrej's Loss number\n",
    "- In the lecture Anrej's loss number is 2.17 and we can improve the model with some of the following suggestions:\n",
    "    - Changing the hidden neurons number\n",
    "    - Changing the emebdding size \n",
    "    - Changing the block size feeding into the model\n",
    "    - Number of epochs\n",
    "    - The learning rate\n",
    "    - The learning rate decay\n",
    "    - Batch size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "0b79ceab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:33:43.515721Z",
     "iopub.status.busy": "2024-07-02T17:33:43.515299Z",
     "iopub.status.idle": "2024-07-02T17:33:43.522026Z",
     "shell.execute_reply": "2024-07-02T17:33:43.520360Z"
    },
    "papermill": {
     "duration": 0.033764,
     "end_time": "2024-07-02T17:33:43.525126",
     "exception": false,
     "start_time": "2024-07-02T17:33:43.491362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Config\n",
    "NEURONS = 200\n",
    "EMBED_SIZE = 12\n",
    "BLOCK_SIZE = 4\n",
    "NUM_EPOCHS = 200000\n",
    "lr = 0.1\n",
    "lr_decay_rate = 0.1\n",
    "BATCH_SIZE = 512"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "c3251e1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:33:43.574314Z",
     "iopub.status.busy": "2024-07-02T17:33:43.573832Z",
     "iopub.status.idle": "2024-07-02T17:33:44.516943Z",
     "shell.execute_reply": "2024-07-02T17:33:44.515758Z"
    },
    "papermill": {
     "duration": 0.971829,
     "end_time": "2024-07-02T17:33:44.519259",
     "exception": false,
     "start_time": "2024-07-02T17:33:43.547430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([182580, 4]) torch.Size([182580])\n",
      "torch.Size([22767, 4]) torch.Size([22767])\n",
      "torch.Size([22799, 4]) torch.Size([22799])\n"
     ]
    }
   ],
   "source": [
    "def build_dataset(words):  \n",
    "    X, Y = [], []\n",
    "    for w in words:\n",
    "\n",
    "        #print(w)\n",
    "        context = [0] * BLOCK_SIZE\n",
    "        for ch in w + '.':\n",
    "            ix = stoi[ch]\n",
    "            X.append(context)\n",
    "            Y.append(ix)\n",
    "            #print(''.join(itos[i] for i in context), '--->', itos[ix])\n",
    "            context = context[1:] + [ix] # crop and append\n",
    "\n",
    "    X = torch.tensor(X)\n",
    "    Y = torch.tensor(Y)\n",
    "    print(X.shape, Y.shape)\n",
    "    return X, Y\n",
    "\n",
    "import random\n",
    "random.seed(42)\n",
    "random.shuffle(words)\n",
    "n1 = int(0.8*len(words))\n",
    "n2 = int(0.9*len(words)) \n",
    "\n",
    "Xtr, Ytr = build_dataset(words[:n1]) #80% of sample\n",
    "Xdev, Ydev = build_dataset(words[n1:n2]) # 10% of sample\n",
    "Xte, Yte = build_dataset(words[n2:]) # 10% os sample "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "6ca40b48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:33:44.565695Z",
     "iopub.status.busy": "2024-07-02T17:33:44.564922Z",
     "iopub.status.idle": "2024-07-02T17:33:44.575593Z",
     "shell.execute_reply": "2024-07-02T17:33:44.574353Z"
    },
    "papermill": {
     "duration": 0.037178,
     "end_time": "2024-07-02T17:33:44.578681",
     "exception": false,
     "start_time": "2024-07-02T17:33:44.541503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of parameters in total is 15551\n"
     ]
    }
   ],
   "source": [
    "g = torch.Generator().manual_seed(2147483647) # for reproducibility\n",
    "C = torch.randn((27, EMBED_SIZE), generator=g) #Increase to 10 dimensionsal embedding\n",
    "W1 = torch.randn((EMBED_SIZE*BLOCK_SIZE, NEURONS), generator=g) # Input shape = 10 embed dimension with blocksize 3 with 200 neurons\n",
    "b1 = torch.randn(NEURONS, generator=g) \n",
    "W2 = torch.randn((NEURONS, 27), generator=g)\n",
    "b2 = torch.randn(27, generator=g)\n",
    "parameters = [C, W1, b1, W2, b2]\n",
    "print(f\"The number of parameters in total is {sum(p.numel() for p in parameters)}\") \n",
    "\n",
    "#The parameters are not tracking the gradient at the moment so we have to set requires_grad = True\n",
    "for p in parameters:\n",
    "    p.requires_grad = True    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "c467e7b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:33:44.628042Z",
     "iopub.status.busy": "2024-07-02T17:33:44.627637Z",
     "iopub.status.idle": "2024-07-02T17:39:08.657301Z",
     "shell.execute_reply": "2024-07-02T17:39:08.656080Z"
    },
    "papermill": {
     "duration": 324.056475,
     "end_time": "2024-07-02T17:39:08.659805",
     "exception": false,
     "start_time": "2024-07-02T17:33:44.603330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1beb9c05d68e476790b7e7e31342db3d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/200000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stepi = []\n",
    "lossi = []\n",
    "for i in tqdm(range(NUM_EPOCHS)):\n",
    "    # Create a random minibatch from our dataset\n",
    "    ix = torch.randint(0,Xtr.shape[0],(BATCH_SIZE,))\n",
    "    # Forward Pass\n",
    "    emb = C[Xtr[ix]] \n",
    "    h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "    logits = h@W2 + b2\n",
    "    loss = F.cross_entropy(logits, Ytr[ix]) # Need to do the same of Y, take the 32 samples at the same indexes\n",
    "    # Backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    lr = lr if  i < epochs // 2 else lr*lr_decay_rate\n",
    "\n",
    "    # Update the weight\n",
    "    for p in parameters:\n",
    "        p.data += -lr*p.grad\n",
    "    \n",
    "    stepi.append(i)\n",
    "    lossi.append(loss.log10().item())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "81295f1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:39:08.706262Z",
     "iopub.status.busy": "2024-07-02T17:39:08.705793Z",
     "iopub.status.idle": "2024-07-02T17:39:09.039259Z",
     "shell.execute_reply": "2024-07-02T17:39:09.038182Z"
    },
    "papermill": {
     "duration": 0.359716,
     "end_time": "2024-07-02T17:39:09.041934",
     "exception": false,
     "start_time": "2024-07-02T17:39:08.682218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set loss: 2.1303794384002686\n"
     ]
    }
   ],
   "source": [
    "emb = C[Xtr]\n",
    "h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "logits = h@W2 + b2\n",
    "loss = F.cross_entropy(logits, Ytr)\n",
    "print(f\"Train set loss: {loss.item()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "f83a8629",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:39:09.091021Z",
     "iopub.status.busy": "2024-07-02T17:39:09.090624Z",
     "iopub.status.idle": "2024-07-02T17:39:09.145033Z",
     "shell.execute_reply": "2024-07-02T17:39:09.143858Z"
    },
    "papermill": {
     "duration": 0.081373,
     "end_time": "2024-07-02T17:39:09.147390",
     "exception": false,
     "start_time": "2024-07-02T17:39:09.066017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dev set loss: 2.1677262783050537\n"
     ]
    }
   ],
   "source": [
    "emb = C[Xdev]\n",
    "h = torch.tanh(emb.view(emb.shape[0],-1)@W1 + b1)\n",
    "logits = h@W2 + b2\n",
    "loss = F.cross_entropy(logits, Ydev)\n",
    "print(f\"Dev set loss: {loss.item()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "1799c644",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:39:09.194268Z",
     "iopub.status.busy": "2024-07-02T17:39:09.193436Z",
     "iopub.status.idle": "2024-07-02T17:39:09.571813Z",
     "shell.execute_reply": "2024-07-02T17:39:09.570696Z"
    },
    "papermill": {
     "duration": 0.4049,
     "end_time": "2024-07-02T17:39:09.574352",
     "exception": false,
     "start_time": "2024-07-02T17:39:09.169452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7a9390109840>]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(stepi,lossi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "c0b24e55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T17:39:09.621974Z",
     "iopub.status.busy": "2024-07-02T17:39:09.621473Z",
     "iopub.status.idle": "2024-07-02T17:39:09.651864Z",
     "shell.execute_reply": "2024-07-02T17:39:09.650424Z"
    },
    "papermill": {
     "duration": 0.057204,
     "end_time": "2024-07-02T17:39:09.654269",
     "exception": false,
     "start_time": "2024-07-02T17:39:09.597065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mora.\n",
      "mayah.\n",
      "keelen.\n",
      "hayla.\n",
      "rethan.\n",
      "endrie.\n",
      "caileed.\n",
      "eliighay.\n",
      "jenleigh.\n",
      "estanah.\n",
      "katelyn.\n",
      "kalin.\n",
      "shranri.\n",
      "himier.\n",
      "kintreelleph.\n",
      "teucan.\n",
      "breynder.\n",
      "yarleyeh.\n",
      "ylay.\n",
      "mystouse.\n"
     ]
    }
   ],
   "source": [
    "# sample from the model\n",
    "g = torch.Generator().manual_seed(2147483647 + 10)\n",
    "\n",
    "for _ in range(20):\n",
    "    \n",
    "    out = []\n",
    "    context = [0] * BLOCK_SIZE # initialize with all ...\n",
    "    while True:\n",
    "        emb = C[torch.tensor([context])] # (1,block_size,d)\n",
    "        h = torch.tanh(emb.view(1, -1) @ W1 + b1)\n",
    "        logits = h @ W2 + b2\n",
    "        probs = F.softmax(logits, dim=1)\n",
    "        ix = torch.multinomial(probs, num_samples=1, generator=g).item()\n",
    "        context = context[1:] + [ix]\n",
    "        out.append(ix)\n",
    "        if ix == 0:\n",
    "            break\n",
    "    \n",
    "    print(''.join(itos[i] for i in out))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 497.576745,
   "end_time": "2024-07-02T17:39:10.703589",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-02T17:30:53.126844",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "070d3b108aef4856a9e07a9e99a554d0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_98d9e36a1386408abd3853a1683db101",
       "placeholder": "​",
       "style": "IPY_MODEL_0dba44f06835490286d0dc4bcc79811e",
       "value": "100%"
      }
     },
     "07b6fed76f4d4332ab961bba72b44d02": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "0dba44f06835490286d0dc4bcc79811e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "10e9fdab7ff74c2cbab8b4a6e5bb5b6b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "1beb9c05d68e476790b7e7e31342db3d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8e8a402332464aecb50a491f14aa6c0b",
        "IPY_MODEL_ae32650ec7134293b3e8fa9f86ce342e",
        "IPY_MODEL_324c22ea055a4ab4bb20837811e67467"
       ],
       "layout": "IPY_MODEL_d8160246cae147b493d5d765d67b7369"
      }
     },
     "2516fb3e57ca4420b090a55bef098338": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "269fe10ee36345b8a5325c1de60c261d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "324c22ea055a4ab4bb20837811e67467": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_e2e03a6161e642d395016c2990c537ad",
       "placeholder": "​",
       "style": "IPY_MODEL_978268402377455da470c238b1892c17",
       "value": " 200000/200000 [05:24&lt;00:00, 559.47it/s]"
      }
     },
     "3c641907f3a44e048d53a5ea9782879c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_070d3b108aef4856a9e07a9e99a554d0",
        "IPY_MODEL_abddc3f8dec4461d86a851ab180e7e6d",
        "IPY_MODEL_9eb5514c2f9742729a6f0d561cb2b1c2"
       ],
       "layout": "IPY_MODEL_7eca9d51582749b8acc471150815b31c"
      }
     },
     "4e008559826d4c269ba55437d22171bc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "69c3fe39ea434f72adfa723d5eea90e1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6a145132772241c083dd1e4a3484b6e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_eacfd226a93c4977bd37813ec4894b99",
       "max": 200000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_07b6fed76f4d4332ab961bba72b44d02",
       "value": 200000.0
      }
     },
     "6f9ae6f7ac024b129568283b1a0d2050": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7742afef53e14fd18a626b01bd2925b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "7eca9d51582749b8acc471150815b31c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "83dd7737b9db4910967c19f5624f1146": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "86b4934ff0d74592869bfa30e1c27649": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8e8a402332464aecb50a491f14aa6c0b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_69c3fe39ea434f72adfa723d5eea90e1",
       "placeholder": "​",
       "style": "IPY_MODEL_2516fb3e57ca4420b090a55bef098338",
       "value": "100%"
      }
     },
     "978268402377455da470c238b1892c17": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "98d9e36a1386408abd3853a1683db101": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9eb5514c2f9742729a6f0d561cb2b1c2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_e0fc901f65ae4218a951a4ab22db4304",
       "placeholder": "​",
       "style": "IPY_MODEL_10e9fdab7ff74c2cbab8b4a6e5bb5b6b",
       "value": " 60000/60000 [00:32&lt;00:00, 1778.30it/s]"
      }
     },
     "abddc3f8dec4461d86a851ab180e7e6d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_269fe10ee36345b8a5325c1de60c261d",
       "max": 60000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6f9ae6f7ac024b129568283b1a0d2050",
       "value": 60000.0
      }
     },
     "ad3cee6da2fc4b80a97a76f24b115630": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ae32650ec7134293b3e8fa9f86ce342e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_86b4934ff0d74592869bfa30e1c27649",
       "max": 200000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ad3cee6da2fc4b80a97a76f24b115630",
       "value": 200000.0
      }
     },
     "b24658a01736437181ceea52d3dfc3e6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d44c2b8a57924df8a72546a4d9f85727": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f7d305348aa44d569dd923f007a5998a",
        "IPY_MODEL_6a145132772241c083dd1e4a3484b6e6",
        "IPY_MODEL_e872322f818341a6a32ac2a05d5a2742"
       ],
       "layout": "IPY_MODEL_4e008559826d4c269ba55437d22171bc"
      }
     },
     "d8160246cae147b493d5d765d67b7369": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e0fc901f65ae4218a951a4ab22db4304": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e2e03a6161e642d395016c2990c537ad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e872322f818341a6a32ac2a05d5a2742": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b24658a01736437181ceea52d3dfc3e6",
       "placeholder": "​",
       "style": "IPY_MODEL_83dd7737b9db4910967c19f5624f1146",
       "value": " 200000/200000 [01:47&lt;00:00, 1644.58it/s]"
      }
     },
     "eacfd226a93c4977bd37813ec4894b99": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f197fd2b8c5d4ebaaba361f167d31767": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f7d305348aa44d569dd923f007a5998a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_f197fd2b8c5d4ebaaba361f167d31767",
       "placeholder": "​",
       "style": "IPY_MODEL_7742afef53e14fd18a626b01bd2925b9",
       "value": "100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
