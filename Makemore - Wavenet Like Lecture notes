{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt # for making figures\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:48:17.633901Z","iopub.execute_input":"2024-07-12T19:48:17.634283Z","iopub.status.idle":"2024-07-12T19:48:21.342654Z","shell.execute_reply.started":"2024-07-12T19:48:17.634251Z","shell.execute_reply":"2024-07-12T19:48:21.341348Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntorch.set_default_device(device)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:48:21.344659Z","iopub.execute_input":"2024-07-12T19:48:21.345115Z","iopub.status.idle":"2024-07-12T19:48:21.352129Z","shell.execute_reply.started":"2024-07-12T19:48:21.345065Z","shell.execute_reply":"2024-07-12T19:48:21.350596Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"# Starter Code","metadata":{}},{"cell_type":"code","source":"try:\n    words = open(\"names.txt\",\"r\").read().splitlines()\nexcept:\n    !wget https://raw.githubusercontent.com/karpathy/makemore/master/names.txt\n    words = open(\"names.txt\",\"r\").read().splitlines()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-12T19:48:21.358397Z","iopub.execute_input":"2024-07-12T19:48:21.358784Z","iopub.status.idle":"2024-07-12T19:48:23.126945Z","shell.execute_reply.started":"2024-07-12T19:48:21.358754Z","shell.execute_reply":"2024-07-12T19:48:23.125513Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"--2024-07-12 19:48:22--  https://raw.githubusercontent.com/karpathy/makemore/master/names.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.111.133, 185.199.110.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 228145 (223K) [text/plain]\nSaving to: 'names.txt'\n\nnames.txt           100%[===================>] 222.80K  --.-KB/s    in 0.1s    \n\n2024-07-12 19:48:23 (1.86 MB/s) - 'names.txt' saved [228145/228145]\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# build the vocabulary of characters and mappings to/from integers\nchars = sorted(list(set(''.join(words))))\nstoi = {s:i+1 for i,s in enumerate(chars)}\nstoi['.'] = 0\nitos = {i:s for s,i in stoi.items()}\nvocab_size = len(itos)\nprint(itos)\nprint(vocab_size)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:48:23.128870Z","iopub.execute_input":"2024-07-12T19:48:23.129310Z","iopub.status.idle":"2024-07-12T19:48:23.143054Z","shell.execute_reply.started":"2024-07-12T19:48:23.129273Z","shell.execute_reply":"2024-07-12T19:48:23.141841Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}\n27\n","output_type":"stream"}]},{"cell_type":"code","source":"# build the dataset\nblock_size = 3 # context length: how many characters do we take to predict the next one?\n\ndef build_dataset(words):  \n    X, Y = [], []\n  \n    for w in words:\n        context = [0] * block_size\n        for ch in w + '.':\n            ix = stoi[ch]\n            X.append(context)\n            Y.append(ix)\n            context = context[1:] + [ix] # crop and append\n\n    X = torch.tensor(X)\n    Y = torch.tensor(Y)\n    print(X.shape, Y.shape)\n    return X, Y\n\nimport random\nrandom.seed(42)\nrandom.shuffle(words)\nn1 = int(0.8*len(words))\nn2 = int(0.9*len(words))\n\nXtr,  Ytr  = build_dataset(words[:n1])     # 80%\nXdev, Ydev = build_dataset(words[n1:n2])   # 10%\nXte,  Yte  = build_dataset(words[n2:])     # 10%","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:48:23.145307Z","iopub.execute_input":"2024-07-12T19:48:23.145730Z","iopub.status.idle":"2024-07-12T19:48:24.007689Z","shell.execute_reply.started":"2024-07-12T19:48:23.145693Z","shell.execute_reply":"2024-07-12T19:48:24.006298Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"torch.Size([182625, 3]) torch.Size([182625])\ntorch.Size([22655, 3]) torch.Size([22655])\ntorch.Size([22866, 3]) torch.Size([22866])\n","output_type":"stream"}]},{"cell_type":"code","source":"# shuffle up the words\nimport random\nrandom.seed(42)\nrandom.shuffle(words)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:48:24.009185Z","iopub.execute_input":"2024-07-12T19:48:24.009635Z","iopub.status.idle":"2024-07-12T19:48:24.040411Z","shell.execute_reply.started":"2024-07-12T19:48:24.009599Z","shell.execute_reply":"2024-07-12T19:48:24.039086Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# Near copy paste of the layers we have developed in Part 3\n\n# -----------------------------------------------------------------------------------------------\nclass Linear:\n  \n    def __init__(self, fan_in, fan_out, bias=True):\n        self.weight = torch.randn((fan_in, fan_out)) / fan_in**0.5 # note: kaiming init\n        self.bias = torch.zeros(fan_out) if bias else None\n\n    def __call__(self, x):\n        self.out = x @ self.weight\n        if self.bias is not None:\n            self.out += self.bias\n        return self.out\n\n    def parameters(self):\n        return [self.weight] + ([] if self.bias is None else [self.bias])\n\n# -----------------------------------------------------------------------------------------------\nclass BatchNorm1d:\n  \n    def __init__(self, dim, eps=1e-5, momentum=0.1):\n        self.eps = eps\n        self.momentum = momentum\n        self.training = True\n        # parameters (trained with backprop)\n        self.gamma = torch.ones(dim)\n        self.beta = torch.zeros(dim)\n        # buffers (trained with a running 'momentum update')\n        self.running_mean = torch.zeros(dim)\n        self.running_var = torch.ones(dim)\n  \n    def __call__(self, x):\n    # calculate the forward pass\n        if self.training:\n            xmean = x.mean(0, keepdim=True) # batch mean\n            xvar = x.var(0, keepdim=True) # batch variance\n        else:\n            xmean = self.running_mean\n            xvar = self.running_var\n        xhat = (x - xmean) / torch.sqrt(xvar + self.eps) # normalize to unit variance\n        self.out = self.gamma * xhat + self.beta\n        # update the buffers\n        if self.training:\n            with torch.no_grad():\n                self.running_mean = (1 - self.momentum) * self.running_mean + self.momentum * xmean\n                self.running_var = (1 - self.momentum) * self.running_var + self.momentum * xvar\n        return self.out\n  \n    def parameters(self):\n        return [self.gamma, self.beta]\n\n# -----------------------------------------------------------------------------------------------\nclass Tanh:\n    def __call__(self, x):\n        self.out = torch.tanh(x)\n        return self.out\n    def parameters(self):\n        return []\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:48:24.041845Z","iopub.execute_input":"2024-07-12T19:48:24.042217Z","iopub.status.idle":"2024-07-12T19:48:24.057506Z","shell.execute_reply.started":"2024-07-12T19:48:24.042180Z","shell.execute_reply":"2024-07-12T19:48:24.056047Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"torch.manual_seed(42); # seed rng for reproducibility","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:48:24.059242Z","iopub.execute_input":"2024-07-12T19:48:24.059612Z","iopub.status.idle":"2024-07-12T19:48:24.075453Z","shell.execute_reply.started":"2024-07-12T19:48:24.059582Z","shell.execute_reply":"2024-07-12T19:48:24.073899Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"n_embd = 10\nn_hidden = 200\nC = torch.randn((vocab_size, n_embd))\nlayers = [\n  Linear(n_embd * block_size, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n  Linear(           n_hidden, vocab_size)\n]\n\nwith torch.no_grad():\n    layers[-1].weight *= 0.1 # Last layer make less confident \n\nparameters = [C] + [p for layer in layers for p in layer.parameters()]\nprint(sum(p.nelement() for p in parameters)) # number of parameters in total\nfor p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:48:24.079796Z","iopub.execute_input":"2024-07-12T19:48:24.080310Z","iopub.status.idle":"2024-07-12T19:48:24.131694Z","shell.execute_reply.started":"2024-07-12T19:48:24.080272Z","shell.execute_reply":"2024-07-12T19:48:24.130598Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"12097\n","output_type":"stream"}]},{"cell_type":"code","source":"# same optimization as last time\nmax_steps = 200000\nbatch_size = 32\nlossi = []\n\nfor i in range(max_steps):\n    # minibatch construct\n    ix = torch.randint(0, Xtr.shape[0], (batch_size,))\n    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n\n    # forward pass\n    emb = C[Xb] # embed the characters into vectors\n    x = emb.view(emb.shape[0], -1) # concatenate the vectors\n    for layer in layers:\n        x = layer(x)\n    loss = F.cross_entropy(x, Yb) # loss function\n  \n\n    for p in parameters:\n        p.grad = None\n    loss.backward()\n  \n    # update\n    lr = 0.1 if i < 150000 else 0.01 # step learning rate decay\n    for p in parameters:\n        p.data += -lr * p.grad\n\n    # track stats\n    if i % 10000 == 0: # print every once in a while\n        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n    lossi.append(loss.log10().item())\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:48:24.133178Z","iopub.execute_input":"2024-07-12T19:48:24.133528Z","iopub.status.idle":"2024-07-12T19:52:40.509890Z","shell.execute_reply.started":"2024-07-12T19:48:24.133500Z","shell.execute_reply":"2024-07-12T19:52:40.508850Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"      0/ 200000: 3.2966\n  10000/ 200000: 2.2322\n  20000/ 200000: 2.4111\n  30000/ 200000: 2.1004\n  40000/ 200000: 2.3157\n  50000/ 200000: 2.2104\n  60000/ 200000: 1.9653\n  70000/ 200000: 1.9767\n  80000/ 200000: 2.6738\n  90000/ 200000: 2.0837\n 100000/ 200000: 2.2730\n 110000/ 200000: 1.7491\n 120000/ 200000: 2.2891\n 130000/ 200000: 2.3443\n 140000/ 200000: 2.1731\n 150000/ 200000: 1.8246\n 160000/ 200000: 1.7614\n 170000/ 200000: 2.2419\n 180000/ 200000: 2.0803\n 190000/ 200000: 2.1326\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.plot(lossi)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:52:40.511439Z","iopub.execute_input":"2024-07-12T19:52:40.512382Z","iopub.status.idle":"2024-07-12T19:52:41.739614Z","shell.execute_reply.started":"2024-07-12T19:52:40.512345Z","shell.execute_reply":"2024-07-12T19:52:41.738533Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x78da510ca950>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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oKAA/v7+ku038p31ku2LiIjImd3fIQSLx3SXdJ/WXr/ZxEFERESKwuSEiIiIFDWVmMkJERERKQqTEyIiIlIUJidERESkqDonTE6IiIhIUZicEBERkaIwOSEiIiJFYXJCREREisLkhIiIiFjnhIiIiMgQJidERETEqcREREREhjA5ISIiIkVhckJERESKwuSEiIiIFIXJCREREXEqMRERESmNcrITJidERESkKExOiIiIiN06RERERIYwOSEiIiJWiCUiIiIyhMkJERERccwJERERKYuCchMmJ0RERKQsTE6IiIgIQkH9OkxOiIiISFGYnBAREZGiMDkhIiIiqBRU6ITJCREREXHMCREREZEhTE6IiIiIdU6IiIiIDGFyQkRERCxfT0RERGQIkxMiIiJSFCYnREREBAWVOWFyQkRERMrC5ISIiIgUhckJERERcbYOERERKYuCchMmJ0RERKQsTE6IiIhIUep0cnJfVGO5QyAiIlIErkqsEMM7h8kdAhEREdVQp5MTIiIiqqRSUBU2JidERETEbh2lUM7bQERERFXqdHJCREREylOnkxPl9K4RERFRlTqdnBAREZHy1OnkhGNOiIiIKiloPGwdT06U9E4QERERgDqenBAREVElBZU5YXJCRERE7NZRDAW9D0RERLISCroq1unkhIiIiCpdzL8ldwhaTE6IiIgIeYVMToiIiEhBlNOpU8eTk+D6nnKHQERERDXU6eSEiIiIlIfJCRERESlqvTkmJ0RERMQxJ0RERESGMDkhIiIiRWFyQkRERIrC5ISIiIgUhckJERERKQqTEyIiIlKUOp2cBPmyQiwREREA1PNylzsELauSk/nz5yMyMhLe3t6Ii4vD3r17DW67evVqdO/eHYGBgahXrx5iYmKwfPlyqwOWUtdmQXKHQEREpAgD2jaSOwQti5OTVatWITExETNmzMCBAwcQHR2NIUOGIC8vT+/2DRo0wHvvvYeUlBQcPnwYCQkJSEhIwG+//WZz8ERERCQNtUo5NWItTk7mzp2LCRMmICEhAR06dMDChQvh6+uLJUuW6N1+wIABePTRR9G+fXu0atUKb7zxBrp06YIdO3bYHDwRERG5HouSk7KyMqSmpiI+Pv7uDtRqxMfHIyUlxeTrhRBISkpCeno6+vXrZ3m0dtCwHsedEBERCQUVsLdo9MuVK1dQUVGBkJAQ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"},"metadata":{}}]},{"cell_type":"code","source":"# put layers into eval mode (needed for batchnorm)\nfor layer in layers:\n    layer.training = False","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:52:41.741120Z","iopub.execute_input":"2024-07-12T19:52:41.741554Z","iopub.status.idle":"2024-07-12T19:52:41.746981Z","shell.execute_reply.started":"2024-07-12T19:52:41.741518Z","shell.execute_reply":"2024-07-12T19:52:41.745879Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"@torch.no_grad() # this decorator disables gradient tracking\ndef split_loss(split):\n    x,y = {\n    'train': (Xtr, Ytr),\n    'val': (Xdev, Ydev),\n    'test': (Xte, Yte),\n    }[split]\n    emb = C[x] # (N, block_size, n_embd)\n    x = emb.view(emb.shape[0], -1)\n    for layer in layers:\n        x = layer(x)\n    loss = F.cross_entropy(x, y)\n    print(split, loss.item())\n\nsplit_loss('train')\nsplit_loss('val')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:52:41.748798Z","iopub.execute_input":"2024-07-12T19:52:41.749228Z","iopub.status.idle":"2024-07-12T19:52:42.368624Z","shell.execute_reply.started":"2024-07-12T19:52:41.749178Z","shell.execute_reply":"2024-07-12T19:52:42.367348Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"train 2.0583250522613525\nval 2.1065292358398438\n","output_type":"stream"}]},{"cell_type":"code","source":"for _ in range(20):\n\n    out = []\n    context = [0] * block_size # initialize with all ...\n    while True:\n        # forward pass the neural net\n        emb = C[torch.tensor([context])] # (1,block_size,n_embd)\n        x = emb.view(emb.shape[0], -1) # concatenate the vectors\n        for layer in layers:\n            x = layer(x)\n        logits = x\n        probs = F.softmax(logits, dim=1)\n        # sample from the distribution\n        ix = torch.multinomial(probs, num_samples=1).item()\n        # shift the context window and track the samples\n        context = context[1:] + [ix]\n        out.append(ix)\n        # if we sample the special '.' token, break\n        if ix == 0:\n            break\n\n    print(''.join(itos[i] for i in out)) # decode and print the generated word","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:52:42.370351Z","iopub.execute_input":"2024-07-12T19:52:42.370719Z","iopub.status.idle":"2024-07-12T19:52:42.430714Z","shell.execute_reply.started":"2024-07-12T19:52:42.370689Z","shell.execute_reply":"2024-07-12T19:52:42.429680Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"damiara.\nalyzah.\nfard.\nazalee.\nsayah.\nayvi.\nreino.\nsophemuellani.\nciaub.\nalith.\nsira.\nliza.\njah.\ngrancealynna.\njamaur.\nben.\nquan.\ntorie.\ncoria.\ncer.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Let's improve the model","metadata":{}},{"cell_type":"markdown","source":"## The loss graph","metadata":{}},{"cell_type":"code","source":"# The current lost graph looks like this\n# We can kind of seeing the trend but it's not very clear - we can use .view method to turn the lossi\n# into a 2 dimentional array and then we can average \n# reshape the \nplt.plot(lossi)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:52:42.432581Z","iopub.execute_input":"2024-07-12T19:52:42.432915Z","iopub.status.idle":"2024-07-12T19:52:43.569949Z","shell.execute_reply.started":"2024-07-12T19:52:42.432887Z","shell.execute_reply":"2024-07-12T19:52:43.568915Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x78da506a9b40>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Much clearer to see the loss is decreasing and we can also see the drop at tick 150 where \nplt.plot(torch.tensor(lossi).view(-1,1000).mean(1))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:52:43.571301Z","iopub.execute_input":"2024-07-12T19:52:43.571630Z","iopub.status.idle":"2024-07-12T19:52:43.812671Z","shell.execute_reply.started":"2024-07-12T19:52:43.571603Z","shell.execute_reply":"2024-07-12T19:52:43.811493Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x78da506ff070>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Creating more layers","metadata":{}},{"cell_type":"code","source":"# Currently we have the embedding and concatenation outside of the layers, we can create a class for Embedding and Flatten layer to add to layers\n# We can also create a Sequential class and pass the input through all the layers","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:52:43.814409Z","iopub.execute_input":"2024-07-12T19:52:43.814965Z","iopub.status.idle":"2024-07-12T19:52:43.820084Z","shell.execute_reply.started":"2024-07-12T19:52:43.814926Z","shell.execute_reply":"2024-07-12T19:52:43.818918Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"class Embedding:\n  \n    def __init__(self, num_embeddings, embedding_dim):\n        self.weight = torch.randn((num_embeddings, embedding_dim))\n    \n    def __call__(self, IX):\n        self.out = self.weight[IX]\n        return self.out\n  \n    def parameters(self):\n        return [self.weight]\n    \nclass Flatten:\n    def __call__(self,x):\n        self.out = x.view(x.shape[0], -1)\n        return self.out\n    def parameters(self):\n        return []\n    \nclass Sequential:\n    def __init__(self,layers):\n        self.layers = layers\n        \n    def __call__(self,x):\n        for layer in self.layers:\n            x = layer(x)\n        self.out = x\n        return self.out\n    \n    def parameters(self):\n        return [p for layer in self.layers for p in layer.parameters()]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:52:43.821407Z","iopub.execute_input":"2024-07-12T19:52:43.821737Z","iopub.status.idle":"2024-07-12T19:52:43.834736Z","shell.execute_reply.started":"2024-07-12T19:52:43.821708Z","shell.execute_reply":"2024-07-12T19:52:43.833707Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"n_embd = 10\nn_hidden = 200\n# C = torch.randn((vocab_size, n_embd)) # No longer need this\n# layers = [\n#   Embedding(vocab_size, n_embd),Flatten(),\n#   Linear(n_embd * block_size, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n#   Linear(n_hidden, vocab_size)\n# ]\n\nmodel = Sequential([\n      Embedding(vocab_size, n_embd),Flatten(),\n      Linear(n_embd * block_size, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n      Linear(n_hidden, vocab_size)\n])\n\nwith torch.no_grad():\n    layers[-1].weight *= 0.1 # Last layer make less confident \n\n# parameters = [C] + [p for layer in layers for p in layer.parameters()] # No longer need C outside \nparameters = model.parameters()\nprint(sum(p.nelement() for p in parameters)) # number of parameters in total\nfor p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:52:43.836288Z","iopub.execute_input":"2024-07-12T19:52:43.836995Z","iopub.status.idle":"2024-07-12T19:52:43.853393Z","shell.execute_reply.started":"2024-07-12T19:52:43.836958Z","shell.execute_reply":"2024-07-12T19:52:43.851865Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"12097\n","output_type":"stream"}]},{"cell_type":"code","source":"# same optimization as last time\nmax_steps = 200000\nbatch_size = 32\nlossi = []\n\nfor i in range(max_steps):\n    # minibatch construct\n    ix = torch.randint(0, Xtr.shape[0], (batch_size,))\n    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n\n    # forward pass\n#     emb = C[Xb] # No longer need this\n#     x = emb.view(emb.shape[0], -1) # No longer need this\n    logits = model(Xb)\n    loss = F.cross_entropy(logits, Yb) # loss function\n  \n\n    for p in parameters:\n        p.grad = None\n        \n    loss.backward()\n  \n    # update\n    lr = 0.1 if i < 150000 else 0.01 # step learning rate decay\n    for p in parameters:\n        p.data += -lr * p.grad\n\n    # track stats\n    if i % 10000 == 0: # print every once in a while\n        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n    lossi.append(loss.log10().item())","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:52:43.854911Z","iopub.execute_input":"2024-07-12T19:52:43.855714Z","iopub.status.idle":"2024-07-12T19:57:01.932963Z","shell.execute_reply.started":"2024-07-12T19:52:43.855680Z","shell.execute_reply":"2024-07-12T19:57:01.931867Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"      0/ 200000: 3.5771\n  10000/ 200000: 2.2295\n  20000/ 200000: 2.2986\n  30000/ 200000: 1.9868\n  40000/ 200000: 2.0171\n  50000/ 200000: 2.2133\n  60000/ 200000: 2.1384\n  70000/ 200000: 2.0883\n  80000/ 200000: 2.1927\n  90000/ 200000: 2.2109\n 100000/ 200000: 1.8972\n 110000/ 200000: 2.3262\n 120000/ 200000: 2.2755\n 130000/ 200000: 2.1228\n 140000/ 200000: 2.0569\n 150000/ 200000: 1.9551\n 160000/ 200000: 1.9468\n 170000/ 200000: 2.1779\n 180000/ 200000: 2.2235\n 190000/ 200000: 1.6915\n","output_type":"stream"}]},{"cell_type":"code","source":"for layer in model.layers:\n    layer.training = False","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:57:01.934298Z","iopub.execute_input":"2024-07-12T19:57:01.934673Z","iopub.status.idle":"2024-07-12T19:57:01.939546Z","shell.execute_reply.started":"2024-07-12T19:57:01.934642Z","shell.execute_reply":"2024-07-12T19:57:01.938422Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# evaluate the loss\n@torch.no_grad() # this decorator disables gradient tracking inside pytorch\ndef split_loss(split):\n    x,y = {\n    'train': (Xtr, Ytr),\n    'val': (Xdev, Ydev),\n    'test': (Xte, Yte),\n    }[split]\n    logits = model(x)\n    loss = F.cross_entropy(logits, y)\n    print(split, loss.item())\n\nsplit_loss('train')\nsplit_loss('val')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:57:01.941354Z","iopub.execute_input":"2024-07-12T19:57:01.941877Z","iopub.status.idle":"2024-07-12T19:57:02.510043Z","shell.execute_reply.started":"2024-07-12T19:57:01.941847Z","shell.execute_reply":"2024-07-12T19:57:02.508817Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"train 2.0597269535064697\nval 2.1058459281921387\n","output_type":"stream"}]},{"cell_type":"code","source":"# sample from the model\nfor _ in range(20):\n    \n    out = []\n    context = [0] * block_size # initialize with all ...\n    while True:\n      # forward pass the neural net\n        logits = model(torch.tensor([context]))\n        probs = F.softmax(logits, dim=1)\n        # sample from the distribution\n        ix = torch.multinomial(probs, num_samples=1).item()\n        # shift the context window and track the samples\n        context = context[1:] + [ix]\n        out.append(ix)\n      # if we sample the special '.' token, break\n        if ix == 0:\n            break\n    \n    print(''.join(itos[i] for i in out)) # decode and print the generated word\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:57:02.511733Z","iopub.execute_input":"2024-07-12T19:57:02.512756Z","iopub.status.idle":"2024-07-12T19:57:02.561458Z","shell.execute_reply.started":"2024-07-12T19:57:02.512714Z","shell.execute_reply":"2024-07-12T19:57:02.560181Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"masea.\niman.\nrylynne.\nkhyva.\nmarce.\nziakodaanikain.\namagni.\njamara.\nmara.\njah.\nwareegh.\navon.\nman.\ntoy.\njour.\ndese.\nmarcuz.\njazaadenel.\nnicel.\nathi.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Building a baseline model \n\nhttps://kim.hfg-karlsruhe.de/wp-content/uploads/2018/01/wavenet.png\n","metadata":{}},{"cell_type":"code","source":"# Currently all the input are squeeze into a single layer of embedding. In wavenet, the layers are slowly squeeze to an output and not through a single layer\n# Let's increase the context length and run a baseline model without any other modification","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:57:02.563679Z","iopub.execute_input":"2024-07-12T19:57:02.564117Z","iopub.status.idle":"2024-07-12T19:57:02.569288Z","shell.execute_reply.started":"2024-07-12T19:57:02.564056Z","shell.execute_reply":"2024-07-12T19:57:02.567970Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# build the dataset\nblock_size = 8 # Increase context length\n\ndef build_dataset(words):  \n    X, Y = [], []\n  \n    for w in words:\n        context = [0] * block_size\n        for ch in w + '.':\n            ix = stoi[ch]\n            X.append(context)\n            Y.append(ix)\n            context = context[1:] + [ix] # crop and append\n\n    X = torch.tensor(X)\n    Y = torch.tensor(Y)\n    print(X.shape, Y.shape)\n    return X, Y\n\nimport random\nrandom.seed(42)\nrandom.shuffle(words)\nn1 = int(0.8*len(words))\nn2 = int(0.9*len(words))\n\nXtr,  Ytr  = build_dataset(words[:n1])     # 80%\nXdev, Ydev = build_dataset(words[n1:n2])   # 10%\nXte,  Yte  = build_dataset(words[n2:])     # 10%","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:57:02.570721Z","iopub.execute_input":"2024-07-12T19:57:02.571039Z","iopub.status.idle":"2024-07-12T19:57:03.516949Z","shell.execute_reply.started":"2024-07-12T19:57:02.571013Z","shell.execute_reply":"2024-07-12T19:57:03.515763Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"torch.Size([182437, 8]) torch.Size([182437])\ntorch.Size([22781, 8]) torch.Size([22781])\ntorch.Size([22928, 8]) torch.Size([22928])\n","output_type":"stream"}]},{"cell_type":"code","source":"for x,y in zip(Xtr[0:20], Ytr[0:20]):\n    print(''.join(itos[ix.item()] for ix in x), '-->', itos[y.item()])","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:57:03.518424Z","iopub.execute_input":"2024-07-12T19:57:03.518862Z","iopub.status.idle":"2024-07-12T19:57:03.528389Z","shell.execute_reply.started":"2024-07-12T19:57:03.518824Z","shell.execute_reply":"2024-07-12T19:57:03.527116Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"........ --> t\n.......t --> a\n......ta --> u\n.....tau --> r\n....taur --> e\n...taure --> n\n..tauren --> .\n........ --> s\n.......s --> u\n......su --> l\n.....sul --> e\n....sule --> m\n...sulem --> a\n..sulema --> n\n.suleman --> .\n........ --> z\n.......z --> e\n......ze --> r\n.....zer --> e\n....zere --> n\n","output_type":"stream"}]},{"cell_type":"code","source":"n_embd = 10\nn_hidden = 200\n# C = torch.randn((vocab_size, n_embd)) # No longer need this\n# layers = [\n#   Embedding(vocab_size, n_embd),Flatten(),\n#   Linear(n_embd * block_size, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n#   Linear(n_hidden, vocab_size)\n# ]\n\nmodel = Sequential([\n      Embedding(vocab_size, n_embd),Flatten(),\n      Linear(n_embd * block_size, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n      Linear(n_hidden, vocab_size)\n])\n\nwith torch.no_grad():\n    layers[-1].weight *= 0.1 # Last layer make less confident \n\n# parameters = [C] + [p for layer in layers for p in layer.parameters()] # No longer need C outside \nparameters = model.parameters()\nprint(sum(p.nelement() for p in parameters)) # number of parameters in total\nfor p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:57:03.536840Z","iopub.execute_input":"2024-07-12T19:57:03.537346Z","iopub.status.idle":"2024-07-12T19:57:03.546749Z","shell.execute_reply.started":"2024-07-12T19:57:03.537313Z","shell.execute_reply":"2024-07-12T19:57:03.545564Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"22097\n","output_type":"stream"}]},{"cell_type":"code","source":"# same optimization as last time\nmax_steps = 200000\nbatch_size = 32\nlossi = []\n\nfor i in range(max_steps):\n    # minibatch construct\n    ix = torch.randint(0, Xtr.shape[0], (batch_size,))\n    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n\n    logits = model(Xb)\n    loss = F.cross_entropy(logits, Yb) # loss function\n  \n    for p in parameters:\n        p.grad = None\n        \n    loss.backward()\n  \n    # update\n    lr = 0.1 if i < 150000 else 0.01 # step learning rate decay\n    for p in parameters:\n        p.data += -lr * p.grad\n\n    # track stats\n    if i % 10000 == 0: # print every once in a while\n        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n    lossi.append(loss.log10().item())","metadata":{"execution":{"iopub.status.busy":"2024-07-12T19:57:03.548274Z","iopub.execute_input":"2024-07-12T19:57:03.548693Z","iopub.status.idle":"2024-07-12T20:01:31.740343Z","shell.execute_reply.started":"2024-07-12T19:57:03.548656Z","shell.execute_reply":"2024-07-12T20:01:31.739049Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"      0/ 200000: 3.3628\n  10000/ 200000: 2.2580\n  20000/ 200000: 2.3380\n  30000/ 200000: 2.3607\n  40000/ 200000: 2.0860\n  50000/ 200000: 2.1818\n  60000/ 200000: 2.3878\n  70000/ 200000: 1.9800\n  80000/ 200000: 1.9882\n  90000/ 200000: 2.4036\n 100000/ 200000: 1.8419\n 110000/ 200000: 2.2669\n 120000/ 200000: 2.0278\n 130000/ 200000: 1.5982\n 140000/ 200000: 2.3585\n 150000/ 200000: 2.5471\n 160000/ 200000: 1.6106\n 170000/ 200000: 1.6554\n 180000/ 200000: 2.2400\n 190000/ 200000: 2.1768\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.plot(torch.tensor(lossi).view(-1,1000).mean(1))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:31.741894Z","iopub.execute_input":"2024-07-12T20:01:31.742287Z","iopub.status.idle":"2024-07-12T20:01:32.041667Z","shell.execute_reply.started":"2024-07-12T20:01:31.742256Z","shell.execute_reply":"2024-07-12T20:01:32.040582Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x78da50350a00>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"for layer in model.layers:\n    layer.training = False","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.043070Z","iopub.execute_input":"2024-07-12T20:01:32.043441Z","iopub.status.idle":"2024-07-12T20:01:32.048814Z","shell.execute_reply.started":"2024-07-12T20:01:32.043411Z","shell.execute_reply":"2024-07-12T20:01:32.047490Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"# evaluate the loss\n@torch.no_grad() # this decorator disables gradient tracking inside pytorch\ndef split_loss(split):\n    x,y = {\n    'train': (Xtr, Ytr),\n    'val': (Xdev, Ydev),\n    'test': (Xte, Yte),\n    }[split]\n    logits = model(x)\n    loss = F.cross_entropy(logits, y)\n    print(split, loss.item())\n\nsplit_loss('train')\nsplit_loss('val')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.050474Z","iopub.execute_input":"2024-07-12T20:01:32.050855Z","iopub.status.idle":"2024-07-12T20:01:32.695738Z","shell.execute_reply.started":"2024-07-12T20:01:32.050826Z","shell.execute_reply":"2024-07-12T20:01:32.694573Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"train 1.9176820516586304\nval 2.038881540298462\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Performance log**\n\n- Context Length: 3, Neuron: 200, Train Loss: 2.059, Val Loss: 2.106\n- Context Length: 8, Neuron: 200, Train Loss: 1.920, Val Loss: 2.030","metadata":{}},{"cell_type":"markdown","source":"## Inspecting the shape for each model layer output\n","metadata":{}},{"cell_type":"code","source":"ix = torch.randint(0,Xtr.shape[0], (4,))\nXb, Yb = Xtr[ix], Ytr[ix]\nlogits = model(Xb)\nprint(Xb.shape) # input shape\nXb","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.697137Z","iopub.execute_input":"2024-07-12T20:01:32.697500Z","iopub.status.idle":"2024-07-12T20:01:32.711229Z","shell.execute_reply.started":"2024-07-12T20:01:32.697469Z","shell.execute_reply":"2024-07-12T20:01:32.709944Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"torch.Size([4, 8])\n","output_type":"stream"},{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"tensor([[ 0,  0,  0, 19, 20, 18,  1, 20],\n        [ 0,  0,  0,  0,  0,  0,  1, 12],\n        [ 0,  0,  0,  0,  0,  0,  6,  1],\n        [ 0,  0,  0,  0,  0,  0,  0, 19]])"},"metadata":{}}]},{"cell_type":"code","source":"print(f\"The shape of the model layer number 0 is {model.layers[0].out.shape}\") #Output of Embedding Layer\nprint(f\"The shape of the model layer number 1 is {model.layers[1].out.shape}\") #Output of Flatten Layer\nprint(f\"The shape of the model layer number 2 is {model.layers[2].out.shape}\") #Output of Linear Layer","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.712694Z","iopub.execute_input":"2024-07-12T20:01:32.713048Z","iopub.status.idle":"2024-07-12T20:01:32.719790Z","shell.execute_reply.started":"2024-07-12T20:01:32.713019Z","shell.execute_reply":"2024-07-12T20:01:32.718600Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"The shape of the model layer number 0 is torch.Size([4, 8, 10])\nThe shape of the model layer number 1 is torch.Size([4, 80])\nThe shape of the model layer number 2 is torch.Size([4, 200])\n","output_type":"stream"}]},{"cell_type":"markdown","source":"- In the wavenet paper, we don't want to concatenate all the input dimensions of 8 characters to 10 embedding dimension.\n- We want to concat them slowly throughout the model. In the example we have 8 characters context length,we can concat 2 conssecutive characters into groups (1,2),(3,4),(5,6),(7,8)","metadata":{}},{"cell_type":"code","source":"# Example\ne = torch.randn(4,8,10) # Batch of 4, 8 characters, 10 embedding dimension. Goal: Batch of 4, 4 groups, 2 of 10 embedding dimension concatenate\n# Explicit concatenation\ntorch.cat([e[:,::2,:], e[:,1::2,:]], dim = 2) # Concat the even character indexes to odd chracter indexes on the embedding dimension\n# View method\ne.view(4,4,20)\n# Checking if they are the same\ntorch.equal(torch.cat([e[:,::2,:], e[:,1::2,:]], dim = 2),e.view(4,4,20))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.721349Z","iopub.execute_input":"2024-07-12T20:01:32.721738Z","iopub.status.idle":"2024-07-12T20:01:32.742031Z","shell.execute_reply.started":"2024-07-12T20:01:32.721708Z","shell.execute_reply":"2024-07-12T20:01:32.740908Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"code","source":"# Let's improve the Flatten layer to archive this\nclass FlattenConsecutive:\n    def __init__(self,n): # How many consicutive characters we want to concat\n        self.n = n\n        \n    def __call__(self,x):\n        B,T,C = x.shape\n        x = x.view(B, T//self.n , C*self.n)\n        \n        if x.shape[1] == 1: #Case where we have 1 as time dimension\n            x = x.squeeze(1) # We want to be as explicit as possible so when things break, we know where to look\n        self.out = x\n        return self.out\n    \n    def parameters(self):\n        return []","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.743454Z","iopub.execute_input":"2024-07-12T20:01:32.743892Z","iopub.status.idle":"2024-07-12T20:01:32.752009Z","shell.execute_reply.started":"2024-07-12T20:01:32.743846Z","shell.execute_reply":"2024-07-12T20:01:32.750867Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":"## Cover the base case with new FlattenConsecutive\nExpecting the same as the basecase","metadata":{}},{"cell_type":"code","source":"n_embd = 10\nn_hidden = 200\n\nmodel = Sequential([\n      Embedding(vocab_size, n_embd),\n      FlattenConsecutive(block_size), # To cover the previous behaviour, expecting the same \n      Linear(n_embd * block_size, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n      Linear(n_hidden, vocab_size)\n])\n\nwith torch.no_grad():\n    layers[-1].weight *= 0.1 # Last layer make less confident \n\n# parameters = [C] + [p for layer in layers for p in layer.parameters()] # No longer need C outside \nparameters = model.parameters()\nprint(sum(p.nelement() for p in parameters)) # number of parameters in total\nfor p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.753460Z","iopub.execute_input":"2024-07-12T20:01:32.753867Z","iopub.status.idle":"2024-07-12T20:01:32.767040Z","shell.execute_reply.started":"2024-07-12T20:01:32.753829Z","shell.execute_reply":"2024-07-12T20:01:32.765927Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"22097\n","output_type":"stream"}]},{"cell_type":"code","source":"ix = torch.randint(0,Xtr.shape[0], (4,))\nXb, Yb = Xtr[ix], Ytr[ix]\nlogits = model(Xb)\nprint(Xb.shape) # input shape\nXb","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.768598Z","iopub.execute_input":"2024-07-12T20:01:32.769040Z","iopub.status.idle":"2024-07-12T20:01:32.782024Z","shell.execute_reply.started":"2024-07-12T20:01:32.769003Z","shell.execute_reply":"2024-07-12T20:01:32.780768Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"torch.Size([4, 8])\n","output_type":"stream"},{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"tensor([[ 0,  0,  0,  0,  0,  0,  0, 10],\n        [ 0,  0,  0,  0,  0,  0,  1, 25],\n        [ 0,  0,  0,  0,  0,  0,  0,  0],\n        [ 0,  0,  0,  0,  0,  0,  0, 16]])"},"metadata":{}}]},{"cell_type":"code","source":"for layer in model.layers:\n    print(layer.__class__.__name__, \":\", tuple(layer.out.shape))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.783537Z","iopub.execute_input":"2024-07-12T20:01:32.783918Z","iopub.status.idle":"2024-07-12T20:01:32.790690Z","shell.execute_reply.started":"2024-07-12T20:01:32.783889Z","shell.execute_reply":"2024-07-12T20:01:32.789582Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"Embedding : (4, 8, 10)\nFlattenConsecutive : (4, 80)\nLinear : (4, 200)\nBatchNorm1d : (4, 200)\nTanh : (4, 200)\nLinear : (4, 27)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Implementing concat 2 consecutive characters","metadata":{}},{"cell_type":"code","source":"n_embd = 10\nn_hidden = 68 #change this to 68 so that we have a similar number of parameters as before to check if the model is more capable\n\nmodel = Sequential([\n      Embedding(vocab_size, n_embd),\n      FlattenConsecutive(2), Linear(n_embd * 2, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(), #The Linear layer input is n_embd * 2 instead of n_embed * block_size\n      FlattenConsecutive(2), Linear(n_hidden * 2, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(), #The Linear layer would take in the hidden dimension\n      FlattenConsecutive(2), Linear(n_hidden * 2, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n      Linear(n_hidden, vocab_size)\n])\n\nwith torch.no_grad():\n    layers[-1].weight *= 0.1 # Last layer make less confident \n\n# parameters = [C] + [p for layer in layers for p in layer.parameters()] # No longer need C outside \nparameters = model.parameters()\nprint(sum(p.nelement() for p in parameters)) # number of parameters in total\nfor p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.791897Z","iopub.execute_input":"2024-07-12T20:01:32.792424Z","iopub.status.idle":"2024-07-12T20:01:32.806145Z","shell.execute_reply.started":"2024-07-12T20:01:32.792392Z","shell.execute_reply":"2024-07-12T20:01:32.804844Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"22397\n","output_type":"stream"}]},{"cell_type":"code","source":"ix = torch.randint(0,Xtr.shape[0], (4,))\nXb, Yb = Xtr[ix], Ytr[ix]\nlogits = model(Xb)\nprint(Xb.shape) # input shape\nXb","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.807487Z","iopub.execute_input":"2024-07-12T20:01:32.807857Z","iopub.status.idle":"2024-07-12T20:01:32.827805Z","shell.execute_reply.started":"2024-07-12T20:01:32.807822Z","shell.execute_reply":"2024-07-12T20:01:32.826591Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"torch.Size([4, 8])\n","output_type":"stream"},{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"tensor([[ 0,  0,  0,  0,  0,  0, 10, 15],\n        [ 0,  0,  0,  0,  0,  1,  9, 19],\n        [ 0,  0,  0,  0, 20, 15, 14,  9],\n        [ 0,  0,  0,  0,  0, 12,  5,  9]])"},"metadata":{}}]},{"cell_type":"code","source":"for layer in model.layers:\n    print(layer.__class__.__name__, \":\", tuple(layer.out.shape))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.829533Z","iopub.execute_input":"2024-07-12T20:01:32.829949Z","iopub.status.idle":"2024-07-12T20:01:32.837219Z","shell.execute_reply.started":"2024-07-12T20:01:32.829912Z","shell.execute_reply":"2024-07-12T20:01:32.836178Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"Embedding : (4, 8, 10)\nFlattenConsecutive : (4, 4, 20)\nLinear : (4, 4, 68)\nBatchNorm1d : (4, 4, 68)\nTanh : (4, 4, 68)\nFlattenConsecutive : (4, 2, 136)\nLinear : (4, 2, 68)\nBatchNorm1d : (4, 2, 68)\nTanh : (4, 2, 68)\nFlattenConsecutive : (4, 136)\nLinear : (4, 68)\nBatchNorm1d : (4, 68)\nTanh : (4, 68)\nLinear : (4, 27)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Train this model\n# same optimization as last time\nmax_steps = 200000\nbatch_size = 32\nlossi = []\n\nfor i in range(max_steps):\n    # minibatch construct\n    ix = torch.randint(0, Xtr.shape[0], (batch_size,))\n    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n\n    logits = model(Xb)\n    loss = F.cross_entropy(logits, Yb) # loss function\n  \n    for p in parameters:\n        p.grad = None\n        \n    loss.backward()\n  \n    # update\n    lr = 0.1 if i < 150000 else 0.01 # step learning rate decay\n    for p in parameters:\n        p.data += -lr * p.grad\n\n    # track stats\n    if i % 10000 == 0: # print every once in a while\n        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n    lossi.append(loss.log10().item())","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:01:32.838694Z","iopub.execute_input":"2024-07-12T20:01:32.839019Z","iopub.status.idle":"2024-07-12T20:11:01.320880Z","shell.execute_reply.started":"2024-07-12T20:01:32.838985Z","shell.execute_reply":"2024-07-12T20:11:01.319488Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"      0/ 200000: 3.4780\n  10000/ 200000: 2.0554\n  20000/ 200000: 2.1390\n  30000/ 200000: 1.9849\n  40000/ 200000: 2.0131\n  50000/ 200000: 1.8107\n  60000/ 200000: 1.9902\n  70000/ 200000: 2.2719\n  80000/ 200000: 1.8865\n  90000/ 200000: 1.9497\n 100000/ 200000: 1.9107\n 110000/ 200000: 1.9722\n 120000/ 200000: 2.0631\n 130000/ 200000: 1.8708\n 140000/ 200000: 1.9816\n 150000/ 200000: 2.2088\n 160000/ 200000: 1.9986\n 170000/ 200000: 1.8787\n 180000/ 200000: 1.7941\n 190000/ 200000: 1.8043\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.plot(torch.tensor(lossi).view(-1,1000).mean(1))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:11:01.322810Z","iopub.execute_input":"2024-07-12T20:11:01.325568Z","iopub.status.idle":"2024-07-12T20:11:01.638784Z","shell.execute_reply.started":"2024-07-12T20:11:01.325524Z","shell.execute_reply":"2024-07-12T20:11:01.637596Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x78da5023fd60>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# evaluate the loss\n@torch.no_grad() # this decorator disables gradient tracking inside pytorch\ndef split_loss(split):\n    x,y = {\n    'train': (Xtr, Ytr),\n    'val': (Xdev, Ydev),\n    'test': (Xte, Yte),\n    }[split]\n    logits = model(x)\n    loss = F.cross_entropy(logits, y)\n    print(split, loss.item())\n\nsplit_loss('train')\nsplit_loss('val')\n# Doesn't seem that much better","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:11:01.640221Z","iopub.execute_input":"2024-07-12T20:11:01.640624Z","iopub.status.idle":"2024-07-12T20:11:03.835827Z","shell.execute_reply.started":"2024-07-12T20:11:01.640595Z","shell.execute_reply":"2024-07-12T20:11:03.834749Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"train 1.9363528490066528\nval 2.0352206230163574\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Performance log**\n\n- Context Length: 3, Neuron: 200, Train Loss: 2.059, Val Loss: 2.106\n- 22K parameters - Context Length: 3 --> 8, Neuron: 200, Train Loss: 1.920, Val Loss: 2.030\n- 22K parameters - Flat -> Hierachical. Context Length: 8, Neuron: 200, Train Loss: 1.94, Val Loss: 2.040","metadata":{}},{"cell_type":"markdown","source":"## Bug in the BatchNorm layer","metadata":{}},{"cell_type":"code","source":"# The shape of the running mean is currently only wotk with 2 dimensional input. But we want this mean to be over all the dimension except the last one\nmodel.layers[3].running_mean.shape # Should be (1,1,68)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:11:03.837437Z","iopub.execute_input":"2024-07-12T20:11:03.837782Z","iopub.status.idle":"2024-07-12T20:11:03.845461Z","shell.execute_reply.started":"2024-07-12T20:11:03.837753Z","shell.execute_reply":"2024-07-12T20:11:03.843901Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"torch.Size([1, 4, 68])"},"metadata":{}}]},{"cell_type":"code","source":"# This is where we are departing from the PyTorch BatchNorm1D since we assume the last dimension is the embedding dimension but Pytorch assume the embedding dimension is at 1\nclass BatchNorm1d:\n  \n    def __init__(self, dim, eps=1e-5, momentum=0.1):\n        self.eps = eps\n        self.momentum = momentum\n        self.training = True\n        # parameters (trained with backprop)\n        self.gamma = torch.ones(dim)\n        self.beta = torch.zeros(dim)\n        # buffers (trained with a running 'momentum update')\n        self.running_mean = torch.zeros(dim)\n        self.running_var = torch.ones(dim)\n  \n    def __call__(self, x):\n    # calculate the forward pass\n        if self.training:\n            if x.ndim ==2:\n                dim = 0\n            if x.ndim ==3:\n                dim = (0,1)\n            xmean = x.mean(dim, keepdim=True) # batch mean\n            xvar = x.var(dim, keepdim=True) # batch variance\n        else:\n            xmean = self.running_mean\n            xvar = self.running_var\n        xhat = (x - xmean) / torch.sqrt(xvar + self.eps) # normalize to unit variance\n        self.out = self.gamma * xhat + self.beta\n        # update the buffers\n        if self.training:\n            with torch.no_grad():\n                self.running_mean = (1 - self.momentum) * self.running_mean + self.momentum * xmean\n                self.running_var = (1 - self.momentum) * self.running_var + self.momentum * xvar\n        return self.out\n  \n    def parameters(self):\n        return [self.gamma, self.beta]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:11:03.846956Z","iopub.execute_input":"2024-07-12T20:11:03.847328Z","iopub.status.idle":"2024-07-12T20:11:03.860392Z","shell.execute_reply.started":"2024-07-12T20:11:03.847288Z","shell.execute_reply":"2024-07-12T20:11:03.858776Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"markdown","source":"## Reinitialize the model with the new BatchNorm Layer","metadata":{}},{"cell_type":"code","source":"n_embd = 10\nn_hidden = 68 #change this to 68 so that we have a similar number of parameters as before to check if the model is more capable\n\nmodel = Sequential([\n      Embedding(vocab_size, n_embd),\n      FlattenConsecutive(2), Linear(n_embd * 2, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(), #The Linear layer input is n_embd * 2 instead of n_embed * block_size\n      FlattenConsecutive(2), Linear(n_hidden * 2, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(), #The Linear layer would take in the hidden dimension\n      FlattenConsecutive(2), Linear(n_hidden * 2, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n      Linear(n_hidden, vocab_size)\n])\n\nwith torch.no_grad():\n    layers[-1].weight *= 0.1 # Last layer make less confident \n\n# parameters = [C] + [p for layer in layers for p in layer.parameters()] # No longer need C outside \nparameters = model.parameters()\nprint(sum(p.nelement() for p in parameters)) # number of parameters in total\nfor p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:11:03.861419Z","iopub.execute_input":"2024-07-12T20:11:03.861781Z","iopub.status.idle":"2024-07-12T20:11:03.884080Z","shell.execute_reply.started":"2024-07-12T20:11:03.861752Z","shell.execute_reply":"2024-07-12T20:11:03.882755Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"22397\n","output_type":"stream"}]},{"cell_type":"code","source":"ix = torch.randint(0,Xtr.shape[0], (4,))\nXb, Yb = Xtr[ix], Ytr[ix]\nlogits = model(Xb)\nprint(Xb.shape) # input shape\nXb","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:11:03.885874Z","iopub.execute_input":"2024-07-12T20:11:03.886434Z","iopub.status.idle":"2024-07-12T20:11:03.902150Z","shell.execute_reply.started":"2024-07-12T20:11:03.886390Z","shell.execute_reply":"2024-07-12T20:11:03.900801Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"torch.Size([4, 8])\n","output_type":"stream"},{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"tensor([[ 0,  0,  0,  1,  1, 13,  9, 18],\n        [ 0,  0,  0,  0,  0,  0,  0,  0],\n        [ 0,  0,  1, 18,  3,  8,  9, 13],\n        [ 0,  0,  0,  0,  0,  0,  0, 14]])"},"metadata":{}}]},{"cell_type":"code","source":"model.layers[3].running_mean.shape #Looks right","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:11:03.903741Z","iopub.execute_input":"2024-07-12T20:11:03.904074Z","iopub.status.idle":"2024-07-12T20:11:03.911998Z","shell.execute_reply.started":"2024-07-12T20:11:03.904046Z","shell.execute_reply":"2024-07-12T20:11:03.910785Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"torch.Size([1, 1, 68])"},"metadata":{}}]},{"cell_type":"code","source":"# Train this model\n# same optimization as last time\nmax_steps = 200000\nbatch_size = 32\nlossi = []\n\nfor i in range(max_steps):\n    # minibatch construct\n    ix = torch.randint(0, Xtr.shape[0], (batch_size,))\n    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n\n    logits = model(Xb)\n    loss = F.cross_entropy(logits, Yb) # loss function\n  \n    for p in parameters:\n        p.grad = None\n        \n    loss.backward()\n  \n    # update\n    lr = 0.1 if i < 150000 else 0.01 # step learning rate decay\n    for p in parameters:\n        p.data += -lr * p.grad\n\n    # track stats\n    if i % 10000 == 0: # print every once in a while\n        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n    lossi.append(loss.log10().item())","metadata":{"execution":{"iopub.status.busy":"2024-07-12T20:11:03.913774Z","iopub.execute_input":"2024-07-12T20:11:03.914164Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"      0/ 200000: 3.5858\n  10000/ 200000: 1.8643\n  20000/ 200000: 2.0317\n  30000/ 200000: 2.0486\n  40000/ 200000: 2.4452\n  50000/ 200000: 1.6893\n  60000/ 200000: 1.8394\n  70000/ 200000: 2.2490\n  80000/ 200000: 2.2916\n  90000/ 200000: 2.0286\n 100000/ 200000: 2.2425\n 110000/ 200000: 1.8254\n 120000/ 200000: 2.0598\n 130000/ 200000: 2.0490\n 140000/ 200000: 2.0904\n 150000/ 200000: 2.0837\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.plot(torch.tensor(lossi).view(-1,1000).mean(1))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# evaluate the loss\n@torch.no_grad() # this decorator disables gradient tracking inside pytorch\ndef split_loss(split):\n    x,y = {\n    'train': (Xtr, Ytr),\n    'val': (Xdev, Ydev),\n    'test': (Xte, Yte),\n    }[split]\n    logits = model(x)\n    loss = F.cross_entropy(logits, y)\n    print(split, loss.item())\n\nsplit_loss('train')\nsplit_loss('val')\n# Doesn't seem that much better","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Performance log**\n\n- Context Length: 3, Neuron: 200, Train Loss: 2.059, Val Loss: 2.106\n- 22K parameters - Context Length: 3 --> 8, Neuron: 200, Train Loss: 1.920, Val Loss: 2.030\n- 22K parameters - Flat -> Hierachical. Context Length: 8, Neuron: 200, Train Loss: 1.94, Val Loss: 2.040","metadata":{}}]}